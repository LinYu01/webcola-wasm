{"version":3,"file":"cola.esm.js","sources":["../src/powergraph.ts","../src/linklengths.ts","../src/descent.ts","../src/vpsc.ts","../src/rbtree.ts","../src/rectangle.ts","../src/pqueue.ts","../src/shortestpaths.ts","../src/geom.ts","../src/handledisconnected.ts","../src/wasm/build/simd/derivative_computer_bg.js","../src/wasm/build/no_simd/derivative_computer_bg.js","../src/wasmEngine.ts","../src/layout.ts","../src/adaptor.ts","../src/d3v3adaptor.ts","../src/d3v4adaptor.ts","../src/d3adaptor.ts","../src/gridrouter.ts","../src/layout3d.ts","../src/batch.ts"],"sourcesContent":["import {LinkAccessor} from './linklengths'\n\nexport interface LinkTypeAccessor<Link> extends LinkAccessor<Link> {\n        // return a unique identifier for the type of the link\n        getType(l: Link): number;\n    }\n\n    export class PowerEdge {\n        constructor(\n            public source: any,\n            public target: any,\n            public type: number) { }\n    }\n\n    export class Configuration<Link> {\n        // canonical list of modules.\n        // Initialized to a module for each leaf node, such that the ids and indexes of the module in the array match the indexes of the nodes in links\n        // Modules created through merges are appended to the end of this.\n        modules: Module[];\n        // top level modules and candidates for merges\n        roots: ModuleSet[];\n        // remaining edge count\n        R: number;\n        constructor(n: number, edges: Link[], private linkAccessor: LinkTypeAccessor<Link>, rootGroup?: any[]) {\n            this.modules = new Array(n);\n            this.roots = [];\n            if (rootGroup) {\n                this.initModulesFromGroup(rootGroup);\n            } else {\n                this.roots.push(new ModuleSet());\n                for (var i = 0; i < n; ++i)\n                    this.roots[0].add(this.modules[i] = new Module(i));\n            }\n            this.R = edges.length;\n            edges.forEach(e => {\n                var s = this.modules[linkAccessor.getSourceIndex(e)],\n                    t = this.modules[linkAccessor.getTargetIndex(e)],\n                    type = linkAccessor.getType(e);\n                s.outgoing.add(type, t);\n                t.incoming.add(type, s);\n            });\n        }\n\n        private initModulesFromGroup(group): ModuleSet {\n            var moduleSet = new ModuleSet();\n            this.roots.push(moduleSet);\n            for (var i = 0; i < group.leaves.length; ++i) {\n                var node = group.leaves[i];\n                var module = new Module(node.id);\n                this.modules[node.id] = module;\n                moduleSet.add(module);\n            }\n            if (group.groups) {\n                for (var j = 0; j < group.groups.length; ++j) {\n                    var child = group.groups[j];\n                    // Propagate group properties (like padding, stiffness, ...) as module definition so that the generated power graph group will inherit it\n                    var definition = {};\n                    for (var prop in child)\n                        if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\n                            definition[prop] = child[prop];\n                    // Use negative module id to avoid clashes between predefined and generated modules\n                    moduleSet.add(new Module(-1-j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\n                }\n            }\n            return moduleSet;\n         }\n\n        // merge modules a and b keeping track of their power edges and removing the from roots\n        merge(a: Module, b: Module, k: number = 0): Module {\n            var inInt = a.incoming.intersection(b.incoming),\n                outInt = a.outgoing.intersection(b.outgoing);\n            var children = new ModuleSet();\n            children.add(a);\n            children.add(b);\n            var m = new Module(this.modules.length, outInt, inInt, children);\n            this.modules.push(m);\n            var update = (s: LinkSets, i: string, o: string) => {\n                s.forAll((ms, linktype) => {\n                    ms.forAll(n => {\n                        var nls = <LinkSets>n[i];\n                        nls.add(linktype, m);\n                        nls.remove(linktype, a);\n                        nls.remove(linktype, b);\n                        (<LinkSets>a[o]).remove(linktype, n);\n                        (<LinkSets>b[o]).remove(linktype, n);\n                    });\n                });\n            };\n            update(outInt, \"incoming\", \"outgoing\");\n            update(inInt, \"outgoing\", \"incoming\");\n            this.R -= inInt.count() + outInt.count();\n            this.roots[k].remove(a);\n            this.roots[k].remove(b);\n            this.roots[k].add(m);\n            return m;\n        }\n\n        private rootMerges(k: number = 0): {\n            id: number;\n            nEdges: number;\n            a: Module;\n            b: Module;\n        }[] {\n            var rs = this.roots[k].modules();\n            var n = rs.length;\n            var merges = new Array(n * (n - 1));\n            var ctr = 0;\n            for (var i = 0, i_ = n - 1; i < i_; ++i) {\n                for (var j = i+1; j < n; ++j) {\n                    var a = rs[i], b = rs[j];\n                    merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\n                    ctr++;\n                }\n            }\n            return merges;\n        }\n\n        greedyMerge(): boolean {\n            for (var i = 0; i < this.roots.length; ++i) {\n                // Handle single nested module case\n                if (this.roots[i].modules().length < 2) continue;\n\n                // find the merge that allows for the most edges to be removed.  secondary ordering based on arbitrary id (for predictability)\n                var ms = this.rootMerges(i).sort((a, b) => a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges);\n                var m = ms[0];\n                if (m.nEdges >= this.R) continue;\n                this.merge(m.a, m.b, i);\n                return true;\n            }\n        }\n\n        private nEdges(a: Module, b: Module): number {\n            var inInt = a.incoming.intersection(b.incoming),\n                outInt = a.outgoing.intersection(b.outgoing);\n            return this.R - inInt.count() - outInt.count();\n        }\n\n        getGroupHierarchy(retargetedEdges: PowerEdge[]): any[]{\n            var groups = [];\n            var root = {};\n            toGroups(this.roots[0], root, groups);\n            var es = this.allEdges();\n            es.forEach(e => {\n                var a = this.modules[e.source];\n                var b = this.modules[e.target];\n                retargetedEdges.push(new PowerEdge(\n                    typeof a.gid === \"undefined\" ? e.source : groups[a.gid],\n                    typeof b.gid === \"undefined\" ? e.target : groups[b.gid],\n                    e.type\n                ));\n            });\n            return groups;\n        }\n\n        allEdges(): PowerEdge[] {\n            var es = [];\n            Configuration.getEdges(this.roots[0], es);\n            return es;\n        }\n\n        static getEdges(modules: ModuleSet, es: PowerEdge[]) {\n            modules.forAll(m => {\n                m.getEdges(es);\n                Configuration.getEdges(m.children, es);\n            });\n        }\n    }\n\n    function toGroups(modules: ModuleSet, group, groups) {\n        modules.forAll(m => {\n            if (m.isLeaf()) {\n                if (!group.leaves) group.leaves = [];\n                group.leaves.push(m.id);\n            } else {\n                var g = group;\n                m.gid = groups.length;\n                if (!m.isIsland() || m.isPredefined()) {\n                    g = { id: m.gid };\n                    if (m.isPredefined())\n                        // Apply original group properties\n                        for (var prop in m.definition)\n                            g[prop] = m.definition[prop];\n                    if (!group.groups) group.groups = [];\n                    group.groups.push(m.gid);\n                    groups.push(g);\n                }\n                toGroups(m.children, g, groups);\n            }\n        });\n    }\n\n    export class Module {\n        gid: number;\n\n        constructor(\n            public id: number,\n            public outgoing: LinkSets = new LinkSets(),\n            public incoming: LinkSets = new LinkSets(),\n            public children: ModuleSet = new ModuleSet(),\n            public definition?: any) { }\n\n        getEdges(es: PowerEdge[]) {\n            this.outgoing.forAll((ms, edgetype) => {\n                ms.forAll(target => {\n                    es.push(new PowerEdge(this.id, target.id, edgetype));\n                });\n            });\n        }\n\n        isLeaf() {\n            return this.children.count() === 0;\n        }\n\n        isIsland() {\n            return this.outgoing.count() === 0 && this.incoming.count() === 0;\n        }\n\n        isPredefined(): boolean {\n            return typeof this.definition !== \"undefined\";\n        }\n    }\n\n    function intersection(m: any, n: any): any {\n        var i = {};\n        for (var v in m) if (v in n) i[v] = m[v];\n        return i;\n    }\n\n    export class ModuleSet {\n        table: any = {};\n        count() {\n            return Object.keys(this.table).length;\n        }\n        intersection(other: ModuleSet): ModuleSet {\n            var result = new ModuleSet();\n            result.table = intersection(this.table, other.table);\n            return result;\n        }\n        intersectionCount(other: ModuleSet): number {\n            return this.intersection(other).count();\n        }\n        contains(id: number): boolean {\n            return id in this.table;\n        }\n        add(m: Module): void {\n            this.table[m.id] = m;\n        }\n        remove(m: Module): void {\n            delete this.table[m.id];\n        }\n        forAll(f: (m: Module) => void) {\n            for (var mid in this.table) {\n                f(this.table[mid]);\n            }\n        }\n        modules(): Module[] {\n            var vs = [];\n            this.forAll(m => {\n                if (!m.isPredefined())\n                    vs.push(m);\n            });\n            return vs;\n        }\n    }\n\n    export class LinkSets {\n        sets: any = {};\n        n: number = 0;\n        count(): number {\n            return this.n;\n        }\n        contains(id: number) {\n            var result = false;\n            this.forAllModules(m => {\n                if (!result && m.id == id) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n        add(linktype: number, m: Module) {\n            var s: ModuleSet = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n            s.add(m);\n            ++this.n;\n        }\n        remove(linktype: number, m: Module) {\n            var ms = <ModuleSet>this.sets[linktype];\n            ms.remove(m);\n            if (ms.count() === 0) {\n                delete this.sets[linktype];\n            }\n            --this.n;\n        }\n        forAll(f: (ms: ModuleSet, linktype: number) => void) {\n            for (var linktype in this.sets) {\n                f(<ModuleSet>this.sets[linktype], Number(linktype));\n            }\n        }\n        forAllModules(f: (m: Module) => void) {\n            this.forAll((ms, lt) => ms.forAll(f));\n        }\n        intersection(other: LinkSets): LinkSets {\n            var result: LinkSets = new LinkSets();\n            this.forAll((ms, lt) => {\n                if (lt in other.sets) {\n                    var i = ms.intersection(other.sets[lt]),\n                        n = i.count();\n                    if (n > 0) {\n                        result.sets[lt] = i;\n                        result.n += n;\n                    }\n                }\n            });\n            return result;\n        }\n    }\n\n    function intersectionCount(m: any, n: any): number {\n        return Object.keys(intersection(m, n)).length\n    }\n\n    export function getGroups<Link>(nodes: any[], links: Link[], la: LinkTypeAccessor<Link>, rootGroup?: any[]): { groups: any[]; powerEdges: PowerEdge[] } {\n        var n = nodes.length,\n            c = new Configuration(n, links, la, rootGroup);\n        while (c.greedyMerge());\n        var powerEdges: PowerEdge[] = [];\n        var g = c.getGroupHierarchy(powerEdges);\n        powerEdges.forEach(function (e) {\n            var f = (end) => {\n                var g = e[end];\n                if (typeof g == \"number\") e[end] = nodes[g];\n            };\n            f(\"source\");\n            f(\"target\");\n        });\n        return { groups: g, powerEdges: powerEdges };\n    }\n","    export interface LinkAccessor<Link> {\n        getSourceIndex(l: Link): number;\n        getTargetIndex(l: Link): number;\n    }\n\n    export interface LinkLengthAccessor<Link> extends LinkAccessor<Link> {\n        setLength(l: Link, value: number): void;\n    }\n\n    // compute the size of the union of two sets a and b\n    function unionCount(a: any, b: any): number {\n        var u = {};\n        for (var i in a) u[i] = {};\n        for (var i in b) u[i] = {};\n        return Object.keys(u).length;\n    }\n\n    // compute the size of the intersection of two sets a and b\n    function intersectionCount(a: number[], b: number[]): number {\n        var n = 0;\n        for (var i in a) if (typeof b[i] !== 'undefined') ++n;\n        return n;\n    }\n\n    function getNeighbours<Link>(links: Link[], la: LinkAccessor<Link>): any {\n        var neighbours = {};\n        var addNeighbours = (u, v) => {\n            if (typeof neighbours[u] === 'undefined')\n                neighbours[u] = {};\n            neighbours[u][v] = {};\n        };\n        links.forEach(e => {\n            var u = la.getSourceIndex(e), v = la.getTargetIndex(e);\n            addNeighbours(u, v);\n            addNeighbours(v, u);\n        });\n        return neighbours;\n    }\n\n    // modify the lengths of the specified links by the result of function f weighted by w\n    function computeLinkLengths<Link>(links: Link[], w: number, f: (a: any, b: any) => number, la: LinkLengthAccessor<Link>) {\n        var neighbours = getNeighbours(links, la);\n        links.forEach(l => {\n            var a = neighbours[la.getSourceIndex(l)];\n            var b = neighbours[la.getTargetIndex(l)];\n            la.setLength(l, 1 + w * f(a, b));\n        });\n    }\n\n    /** modify the specified link lengths based on the symmetric difference of their neighbours\n     * @class symmetricDiffLinkLengths\n     */\n    export function symmetricDiffLinkLengths<Link>(links: Link[], la: LinkLengthAccessor<Link>, w: number = 1) {\n        computeLinkLengths(links, w, (a, b) => Math.sqrt(unionCount(a, b) - intersectionCount(a, b)), la);\n    }\n\n    /** modify the specified links lengths based on the jaccard difference between their neighbours\n     * @class jaccardLinkLengths\n     */\n    export function jaccardLinkLengths<Link>(links: Link[], la: LinkLengthAccessor<Link>, w: number = 1) {\n        computeLinkLengths(links, w, (a, b) =>\n            Math.min(Object.keys(a).length, Object.keys(b).length) < 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b)\n            , la);\n    }\n\n    export interface IConstraint {\n        left: number;\n        right: number;\n        gap: number;\n    }\n\n    export interface DirectedEdgeConstraints {\n        axis: string;\n        gap: number;\n    }\n\n    export interface LinkSepAccessor<Link> extends LinkAccessor<Link> {\n        getMinSeparation(l: Link): number;\n    }\n\n    /** generate separation constraints for all edges unless both their source and sink are in the same strongly connected component\n     * @class generateDirectedEdgeConstraints\n     */\n    export function generateDirectedEdgeConstraints<Link>(n: number, links: Link[], axis: string,\n        la: LinkSepAccessor<Link>): IConstraint[]\n    {\n        var components = stronglyConnectedComponents(n, links, la);\n        var nodes = {};\n        components.forEach((c,i) =>\n            c.forEach(v => nodes[v] = i)\n        );\n        var constraints: any[] = [];\n        links.forEach(l => {\n            var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l),\n                u = nodes[ui], v = nodes[vi];\n            if (u !== v) {\n                constraints.push({\n                    axis: axis,\n                    left: ui,\n                    right: vi,\n                    gap: la.getMinSeparation(l)\n                });\n            }\n        });\n        return constraints;\n    }\n\n    /**\n     * Tarjan's strongly connected components algorithm for directed graphs\n     * returns an array of arrays of node indicies in each of the strongly connected components.\n     * a vertex not in a SCC of two or more nodes is it's own SCC.\n     * adaptation of https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\n     */\n    export function stronglyConnectedComponents<Link>(numVertices: number, edges: Link[], la: LinkAccessor<Link>): number[][]{\n        var nodes = [];\n        var index = 0;\n        var stack = [];\n        var components = [];\n        function strongConnect(v) {\n            // Set the depth index for v to the smallest unused index\n            v.index = v.lowlink = index++;\n            stack.push(v);\n            v.onStack = true;\n\n            // Consider successors of v\n            for (var w of v.out) {\n                if (typeof w.index === 'undefined') {\n                    // Successor w has not yet been visited; recurse on it\n                    strongConnect(w);\n                    v.lowlink = Math.min(v.lowlink, w.lowlink);\n                } else if (w.onStack) {\n                    // Successor w is in stack S and hence in the current SCC\n                    v.lowlink = Math.min(v.lowlink, w.index);\n                }\n            }\n\n            // If v is a root node, pop the stack and generate an SCC\n            if (v.lowlink === v.index) {\n                // start a new strongly connected component\n                var component = [];\n                while (stack.length) {\n                    w = stack.pop();\n                    w.onStack = false;\n                    //add w to current strongly connected component\n                    component.push(w);\n                    if (w === v) break;\n                }\n                // output the current strongly connected component\n                components.push(component.map(v => v.id));\n            }\n        }\n        for (var i = 0; i < numVertices; i++) {\n            nodes.push({id: i, out: []});\n        }\n        for (var e of edges) {\n            let v = nodes[la.getSourceIndex(e)],\n                w = nodes[la.getTargetIndex(e)];\n            v.out.push(w);\n        }\n        for (var v of nodes) if (typeof v.index === 'undefined') strongConnect(v);\n        return components;\n    }\n","import type { DerivativeComputerWasmInst } from \"wasmEngine\";\n\n    /**\n     * Descent respects a collection of locks over nodes that should not move\n     * @class Locks\n     */\n    export class Locks {\n        locks: { [key:number]:number[]} = {};\n        /**\n         * add a lock on the node at index id\n         * @method add\n         * @param id index of node to be locked\n         * @param x required position for node\n         */\n        add(id: number, x: number[]) {\n/* DEBUG\n            if (isNaN(x[0]) || isNaN(x[1])) debugger;\nDEBUG */\n            this.locks[id] = x;\n        }\n        /**\n         * @method clear clear all locks\n         */\n        clear() {\n            this.locks = {};\n        }\n        /**\n         * @isEmpty\n         * @returns false if no locks exist\n         */\n        isEmpty(): boolean {\n            for (var l in this.locks) return false;\n            return true;\n        }\n        /**\n         * perform an operation on each lock\n         * @apply\n         */\n        apply(f: (id: number, x: number[]) => void) {\n            for (var l in this.locks) {\n                f(Number(l), this.locks[l]);\n            }\n        }\n    }\n\n    const BYTES_PER_F32 = 32 / 8;\n\n    /**\n     * Uses a gradient descent approach to reduce a stress or p-stress goal function over a graph with specified ideal edge lengths or a square matrix of dissimilarities.\n     * The standard stress function over a graph nodes with position vectors x,y,z is (mathematica input):\n     *   stress[x_,y_,z_,D_,w_]:=Sum[w[[i,j]] (length[x[[i]],y[[i]],z[[i]],x[[j]],y[[j]],z[[j]]]-d[[i,j]])^2,{i,Length[x]-1},{j,i+1,Length[x]}]\n     * where: D is a square matrix of ideal separations between nodes, w is matrix of weights for those separations\n     *        length[x1_, y1_, z1_, x2_, y2_, z2_] = Sqrt[(x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2]\n     * below, we use wij = 1/(Dij^2)\n     *\n     * @class Descent\n     */\n    export class Descent {\n        private wasm: DerivativeComputerWasmInst;\n\n        private ctxPtr: number;\n\n        public threshold: number = 0.0001;\n        /** gradient vector\n         * @property g {Float32Array[]}\n         */\n        public get g(): Float32Array[] {\n            const memory: WebAssembly.Memory = this.wasm.get_memory();\n            const memoryView = new Float32Array(memory.buffer);\n\n            const gPtr = this.k === 2 ? this.wasm.get_g_2d(this.ctxPtr) : this.wasm.get_g_3d(this.ctxPtr);\n            const gOffset = gPtr / BYTES_PER_F32;\n            return new Array(this.k)\n                .fill(null)\n                .map((_, i) => memoryView.subarray(gOffset + i * this.n, gOffset + i * this.n + this.n));\n        }\n        public set G(newG: Float32Array[] | null)  {\n            const allG = (() => {\n                if (newG) {\n                    const allG = new Float32Array(this.n * this.n);\n                    newG.forEach((Gn, i) => allG.set(Gn, i * this.n));\n                    return allG;\n                } else {\n                    return new Float32Array();\n                }\n            })();\n\n            if (this.k === 2) {\n                this.wasm.set_G_2d(this.ctxPtr, allG);\n            } else if (this.k === 3) {\n                this.wasm.set_G_3d(this.ctxPtr, allG);\n            } else {\n                throw new Error('Invalid dimensionality');\n            }\n        }\n       /** positions vector\n         * @property x {number[][]}\n         */\n        public x: Float32Array[];\n        /**\n         * @property k {number} dimensionality\n         */\n        public k: number;\n        /**\n         * number of data-points / nodes / size of vectors/matrices\n         * @property n {number}\n         */\n        public n: number;\n        /**\n         * matrix of desired distances between pairs of nodes\n         */\n         public get D(): Float32Array[] {\n            const memory: WebAssembly.Memory = this.wasm.get_memory();\n            const memoryView = new Float32Array(memory.buffer);\n\n            const DPtr = this.k === 2 ? this.wasm.get_D_2d(this.ctxPtr) : this.wasm.get_D_3d(this.ctxPtr);\n            const DOffset = DPtr / BYTES_PER_F32;\n            return new Array(this.n)\n                .fill(null)\n                .map((_, i) => memoryView.subarray(DOffset + i * this.n, DOffset + i * this.n + this.n));\n        }\n\n        public computeDerivatives(x: Float32Array[]) {\n            if (this.k === 2) {\n                const packedX = (() => {\n                    const packed = new Float32Array(x[0].length * this.k);\n                    x.forEach((xn, i) => packed.set(xn, i * this.n));\n                    return packed;\n                })();\n                const outX = this.wasm.compute_2d(this.ctxPtr, packedX);\n\n                if (x) {\n                    x.forEach((xn, i) => {\n                        const slice = outX.subarray(i * this.n, i * this.n + this.n);\n                        xn.set(slice);\n                    })\n                }\n            } else if (this.k === 3) {\n                const packedX = (() => {\n                    const packed = new Float32Array(x[0].length * this.k);\n                    x.forEach((xn, i) => packed.set(xn, i * this.n));\n                    return packed;\n                })();\n                const outX = this.wasm.compute_3d(this.ctxPtr, packedX);\n\n                if (x) {\n                    x.forEach((xn, i) => {\n                        const slice = outX.subarray(i * this.n, i * this.n + this.n);\n                        xn.set(slice);\n                    })\n                }\n            } else {\n                throw new Error('Invalid dimensionality');\n            }\n\n            if (!this.locks.isEmpty()) {\n                this.locks.apply((u, p) => {\n                    if (this.k === 2) {\n                        this.wasm.apply_lock_2d(this.ctxPtr, u, p[0], p[1], x[0][u], x[1][u]);\n                    } else if (this.k === 3) {\n                        this.wasm.apply_lock_3d(this.ctxPtr, u, p[0], p[1], p[2], x[0][u], x[1][u], x[2][u]);\n                    } else {\n                        throw new Error('Invalid dimensionality');\n                    }\n                });\n            }\n        }\n\n        public locks: Locks;\n\n        private static zeroDistance: number = 1e-10;\n        private minD: number;\n\n        // pool of arrays of size n used internally, allocated in constructor\n        private a: Float32Array[];\n        private b: Float32Array[];\n        private c: Float32Array[];\n        private d: Float32Array[];\n        private e: Float32Array[];\n        private ia: Float32Array[];\n        private ib: Float32Array[];\n        private xtmp: number[][];\n\n\n        // Parameters for grid snap stress.\n        // TODO: Make a pluggable \"StressTerm\" class instead of this\n        // mess.\n        public numGridSnapNodes: number = 0;\n        public snapGridSize: number = 100;\n        public snapStrength: number = 1000;\n        public scaleSnapByMaxH: boolean = false;\n\n        private random = new PseudoRandom();\n\n        public project: { (x0: Float32Array, y0: Float32Array, r: Float32Array): void }[] = null;\n\n        public cleanWasmMemory() {\n            if (this.ctxPtr) {\n                this.wasm.release_ctx_2d(this.ctxPtr);\n                this.ctxPtr = 0;\n            }\n        }\n\n        private setupWasm(D: number[][], G: number[][] | null = null) {\n            const allD = new Float32Array(this.n * this.n);\n            const allG = G ? new Float32Array(this.n * this.k) : new Float32Array(0);\n            D.forEach((dn, i) => {\n                allD.set(dn, i * this.n);\n            });\n            if (G) {\n                G.forEach((gn, i) => {\n                    allG.set(gn, i * this.n);\n                });\n            }\n\n            allD.forEach((d, i) => {\n                if (d === Infinity) {\n                    allD[i] = -10000000; // ideal distance\n                    allG[i] = 1000.; // weight\n                }\n            });\n\n            const createrFn = this.k === 2 ? this.wasm.create_derivative_computer_ctx_2d : this.wasm.create_derivative_computer_ctx_3d;\n            const ctxPtr = createrFn(this.n, allD, allG);\n            this.ctxPtr = ctxPtr;\n        }\n\n        /**\n         * @method constructor\n         * @param x {number[][]} initial coordinates for nodes\n         * @param D {number[][]} matrix of desired distances between pairs of nodes\n         * @param G {number[][]} [default=null] if specified, G is a matrix of weights for goal terms between pairs of nodes.\n         * If G[i][j] > 1 and the separation between nodes i and j is greater than their ideal distance, then there is no contribution for this pair to the goal\n         * If G[i][j] <= 1 then it is used as a weighting on the contribution of the variance between ideal and actual separation between i and j to the goal function\n         */\n        constructor(x: number[][], D: number[][], G: number[][] = null, wasm: DerivativeComputerWasmInst) {\n            this.wasm = wasm;\n            this.x = x.map(xn => new Float32Array(xn));\n            this.k = x.length; // dimensionality\n            var n = this.n = x[0].length; // number of nodes\n\n            // Set up Wasm context\n            this.setupWasm(D, G);\n\n            this.a = new Array(this.k);\n            this.b = new Array(this.k);\n            this.c = new Array(this.k);\n            this.d = new Array(this.k);\n            this.e = new Array(this.k);\n            this.ia = new Array(this.k);\n            this.ib = new Array(this.k);\n            this.xtmp = new Array(this.k);\n            this.locks = new Locks();\n            this.minD = Number.MAX_VALUE;\n            var i = n, j;\n            while (i--) {\n                j = n;\n                while (--j > i) {\n                    var d = D[i][j];\n                    if (d > 0 && d < this.minD) {\n                        this.minD = d;\n                    }\n                }\n            }\n            if (this.minD === Number.MAX_VALUE) this.minD = 1;\n            i = this.k;\n            while (i--) {\n                j = n;\n                this.a[i] = new Float32Array(n);\n                this.b[i] = new Float32Array(n);\n                this.c[i] = new Float32Array(n);\n                this.d[i] = new Float32Array(n);\n                this.e[i] = new Float32Array(n);\n                this.ia[i] = new Float32Array(n);\n                this.ib[i] = new Float32Array(n);\n                this.xtmp[i] = new Array(n);\n            }\n        }\n\n        public static createSquareMatrix(n: number, f: (i: number, j: number) => number): number[][] {\n            var M = new Array(n);\n            for (var i = 0; i < n; ++i) {\n                M[i] = new Array(n);\n                for (var j = 0; j < n; ++j) {\n                    M[i][j] = f(i, j);\n                }\n            }\n            return M;\n        }\n\n        private offsetDir(): number[] {\n            var u = new Array(this.k);\n            var l = 0;\n            for (var i = 0; i < this.k; ++i) {\n                var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\n                l += x * x;\n            }\n            l = Math.sqrt(l);\n            return u.map(x=> x *= this.minD / l);\n        }\n\n        private static dotProd(a: Float32Array, b: Float32Array): number {\n            var x = 0, i = a.length;\n            while (i--) x += a[i] * b[i];\n            return x;\n        }\n\n        // result r = matrix m * vector v\n        private static rightMultiply(m: Float32Array[], v: Float32Array, r: Float32Array) {\n            var i = m.length;\n            while (i--) r[i] = Descent.dotProd(m[i], v);\n        }\n\n        // computes the optimal step size to take in direction d using the\n        // derivative information in this.g and this.H\n        // returns the scalar multiplier to apply to d to get the optimal step\n        public computeStepSize(): number {\n            if (this.k === 2) {\n                return this.wasm.compute_step_size_2d(this.ctxPtr);\n            } else if (this.k === 3) {\n                return this.wasm.compute_step_size_3d(this.ctxPtr);\n            } else {\n                throw new Error('Invalid dimensionality');\n            }\n        }\n\n        public reduceStress(): number {\n            this.computeDerivatives(this.x);\n            var alpha = this.computeStepSize();\n            const thisG = this.g;\n            for (var i = 0; i < this.k; ++i) {\n                this.takeDescentStep(this.x[i], thisG[i], alpha);\n            }\n            return this.computeStress();\n        }\n\n        private static copy(a: Float32Array[], b: Float32Array[]): void {\n            var m = a.length, n = b[0].length;\n            for (var i = 0; i < m; ++i) {\n                for (var j = 0; j < n; ++j) {\n                    b[i][j] = a[i][j];\n                }\n            }\n        }\n\n        // takes a step of stepSize * d from x0, and then project against any constraints.\n        // result is returned in r.\n        // x0: starting positions\n        // r: result positions will be returned here\n        // d: unconstrained descent vector\n        // stepSize: amount to step along d\n        private stepAndProject(x0: Float32Array[], r: Float32Array[], d: Float32Array[], stepSize: number): void {\n            Descent.copy(x0, r);\n            this.takeDescentStep(r[0], d[0], stepSize);\n            if (this.project) this.project[0](x0[0], x0[1], r[0]);\n            this.takeDescentStep(r[1], d[1], stepSize);\n            if (this.project) this.project[1](r[0], x0[1], r[1]);\n\n            // todo: allow projection against constraints in higher dimensions\n            for (var i = 2; i < this.k; i++)\n                this.takeDescentStep(r[i], d[i], stepSize);\n\n            // the following makes locks extra sticky... but hides the result of the projection from the consumer\n            //if (!this.locks.isEmpty()) {\n            //    this.locks.apply((u, p) => {\n            //        for (var i = 0; i < this.k; i++) {\n            //            r[i][u] = p[i];\n            //        }\n            //    });\n            //}\n        }\n\n        private static mApply(m: number, n: number, f: (i: number, j: number) => any) {\n            var i = m; while (i-- > 0) {\n                var j = n; while (j-- > 0) f(i, j);\n            }\n        }\n        private matrixApply(f: (i: number, j: number) => any) {\n            Descent.mApply(this.k, this.n, f);\n        }\n\n        private computeNextPosition(x0: Float32Array[], r: Float32Array[]): void {\n            this.computeDerivatives(x0);\n            const alpha = this.computeStepSize();\n            this.stepAndProject(x0, r, this.g, alpha);\n/* DEBUG\n            for (var u: number = 0; u < this.n; ++u)\n                for (var i = 0; i < this.k; ++i)\n                    if (isNaN(r[i][u])) debugger;\nDEBUG */\n            if (this.project) {\n                // This functionality is not yet implemented with the Wasm port\n                throw new Error('Computing step with with `this.project` set is not yet implemented in Wasm port');\n                // this.matrixApply((i, j) => this.e[i][j] = x0[i][j] - r[i][j]);\n                // var beta = this.computeStepSize(this.e);\n                // beta = Math.max(0.2, Math.min(beta, 1));\n                // this.stepAndProject(x0, r, this.e, beta);\n            }\n        }\n\n        public run(iterations: number): number {\n            var stress = Number.MAX_VALUE, converged = false;\n            while (!converged && iterations-- > 0) {\n                var s = this.rungeKutta();\n                converged = Math.abs(stress / s - 1) < this.threshold;\n                stress = s;\n            }\n            return stress;\n        }\n\n        public rungeKutta(): number {\n            this.computeNextPosition(this.x, this.a);\n            Descent.mid(this.x, this.a, this.ia);\n            this.computeNextPosition(this.ia, this.b);\n            Descent.mid(this.x, this.b, this.ib);\n            this.computeNextPosition(this.ib, this.c);\n            this.computeNextPosition(this.c, this.d);\n            var disp = 0;\n            this.matrixApply((i, j) => {\n                var x = (this.a[i][j] + 2.0 * this.b[i][j] + 2.0 * this.c[i][j] + this.d[i][j]) / 6.0,\n                    d = this.x[i][j] - x;\n                disp += d * d;\n                this.x[i][j] = x;\n            });\n            return disp;\n        }\n\n        private static mid(a: Float32Array[], b: Float32Array[], m: Float32Array[]): void {\n            Descent.mApply(a.length, a[0].length, (i, j) =>\n                m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0);\n        }\n\n        public takeDescentStep(x: Float32Array, d: Float32Array, stepSize: number): void {\n            for (var i = 0; i < this.n; ++i) {\n                x[i] = x[i] - stepSize * d[i];\n            }\n        }\n\n        public computeStress(): number {\n            var stress = 0;\n            for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {\n                for (var v = u + 1, n = this.n; v < n; ++v) {\n                    var l = 0;\n                    for (var i = 0; i < this.k; ++i) {\n                        var dx = this.x[i][u] - this.x[i][v];\n                        l += dx * dx;\n                    }\n                    l = Math.sqrt(l);\n                    var d = this.D[u][v];\n                    if (!isFinite(d)) continue;\n                    var rl = d - l;\n                    var d2 = d * d;\n                    stress += rl * rl / d2;\n                }\n            }\n            return stress;\n        }\n    }\n\n    // Linear congruential pseudo random number generator\n    export class PseudoRandom {\n        private a: number = 214013;\n        private c: number = 2531011;\n        private m: number = 2147483648;\n        private range: number = 32767;\n\n        constructor(public seed: number = 1) { }\n\n        // random real between 0 and 1\n        getNext(): number {\n            this.seed = (this.seed * this.a + this.c) % this.m;\n            return (this.seed >> 16) / this.range;\n        }\n\n        // random real between min and max\n        getNextBetween(min: number, max: number) {\n            return min + this.getNext() * (max - min);\n        }\n    }\n","    export class PositionStats {\n        AB: number = 0;\n        AD: number = 0;\n        A2: number = 0;\n\n        constructor(public scale: number) {}\n\n        addVariable(v: Variable): void {\n            var ai = this.scale / v.scale;\n            var bi = v.offset / v.scale;\n            var wi = v.weight;\n            this.AB += wi * ai * bi;\n            this.AD += wi * ai * v.desiredPosition;\n            this.A2 += wi * ai * ai;\n        }\n\n        getPosn(): number {\n            return (this.AD - this.AB) / this.A2;\n        }\n    }\n\n    export class Constraint {\n        lm: number;\n        active: boolean = false;\n        unsatisfiable: boolean = false;\n\n        constructor(public left: Variable, public right: Variable, public gap: number, public equality: boolean = false) {\n            this.left = left;\n            this.right = right;\n            this.gap = gap;\n            this.equality = equality;\n        }\n\n        slack(): number {\n            return this.unsatisfiable ? Number.MAX_VALUE\n                : this.right.scale * this.right.position() - this.gap\n                - this.left.scale * this.left.position();\n        }\n    }\n\n    export class Variable {\n        offset: number = 0;\n        block: Block;\n        cIn: Constraint[];\n        cOut: Constraint[];\n\n        constructor(public desiredPosition: number, public weight: number = 1, public scale: number = 1) {}\n\n        dfdv(): number {\n            return 2.0 * this.weight * (this.position() - this.desiredPosition);\n        }\n\n        position(): number {\n            return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\n        }\n\n        // visit neighbours by active constraints within the same block\n        visitNeighbours(prev: Variable, f: (c: Constraint, next: Variable) => void ): void {\n            var ff = (c, next) => c.active && prev !== next && f(c, next);\n            this.cOut.forEach(c=> ff(c, c.right));\n            this.cIn.forEach(c=> ff(c, c.left));\n        }\n    }\n\n    export class Block {\n        vars: Variable[] = [];\n        posn: number;\n        ps: PositionStats;\n        blockInd: number;\n\n        constructor(v: Variable) {\n            v.offset = 0;\n            this.ps = new PositionStats(v.scale);\n            this.addVariable(v);\n        }\n\n        private addVariable(v: Variable): void {\n            v.block = this;\n            this.vars.push(v);\n            this.ps.addVariable(v);\n            this.posn = this.ps.getPosn();\n        }\n\n        // move the block where it needs to be to minimize cost\n        updateWeightedPosition(): void {\n            this.ps.AB = this.ps.AD = this.ps.A2 = 0;\n            for (var i = 0, n = this.vars.length; i < n; ++i)\n                this.ps.addVariable(this.vars[i]);\n            this.posn = this.ps.getPosn();\n        }\n\n        private compute_lm(v: Variable, u: Variable, postAction: (c: Constraint)=>void): number {\n            var dfdv = v.dfdv();\n            v.visitNeighbours(u, (c, next) => {\n                var _dfdv = this.compute_lm(next, v, postAction);\n                if (next === c.right) {\n                    dfdv += _dfdv * c.left.scale;\n                    c.lm = _dfdv;\n                } else {\n                    dfdv += _dfdv * c.right.scale;\n                    c.lm = -_dfdv;\n                }\n                postAction(c);\n            });\n            return dfdv / v.scale;\n        }\n\n        private populateSplitBlock(v: Variable, prev: Variable): void {\n            v.visitNeighbours(prev, (c, next) => {\n                next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\n                this.addVariable(next);\n                this.populateSplitBlock(next, v);\n            });\n        }\n\n        // traverse the active constraint tree applying visit to each active constraint\n        traverse(visit: (c: Constraint) => any, acc: any[], v: Variable = this.vars[0], prev: Variable=null) {\n            v.visitNeighbours(prev, (c, next) => {\n                acc.push(visit(c));\n                this.traverse(visit, acc, next, v);\n            });\n        }\n\n        // calculate lagrangian multipliers on constraints and\n        // find the active constraint in this block with the smallest lagrangian.\n        // if the lagrangian is negative, then the constraint is a split candidate.\n        findMinLM(): Constraint {\n            var m: Constraint = null;\n            this.compute_lm(this.vars[0], null, c=> {\n                if (!c.equality && (m === null || c.lm < m.lm)) m = c;\n            });\n            return m;\n        }\n\n        private findMinLMBetween(lv: Variable, rv: Variable): Constraint {\n            this.compute_lm(lv, null, () => {});\n            var m = null;\n            this.findPath(lv, null, rv, (c, next)=> {\n                if (!c.equality && c.right === next && (m === null || c.lm < m.lm)) m = c;\n            });\n            return m;\n        }\n\n        private findPath(v: Variable, prev: Variable, to: Variable, visit: (c: Constraint, next:Variable)=>void): boolean {\n            var endFound = false;\n            v.visitNeighbours(prev, (c, next) => {\n                if (!endFound && (next === to || this.findPath(next, v, to, visit)))\n                {\n                    endFound = true;\n                    visit(c, next);\n                }\n            });\n            return endFound;\n        }\n\n        // Search active constraint tree from u to see if there is a directed path to v.\n        // Returns true if path is found.\n        isActiveDirectedPathBetween(u: Variable, v: Variable) : boolean {\n            if (u === v) return true;\n            var i = u.cOut.length;\n            while(i--) {\n                var c = u.cOut[i];\n                if (c.active && this.isActiveDirectedPathBetween(c.right, v))\n                    return true;\n            }\n            return false;\n        }\n\n        // split the block into two by deactivating the specified constraint\n        static split(c: Constraint): Block[]{\n/* DEBUG\n            console.log(\"split on \" + c);\n            console.assert(c.active, \"attempt to split on inactive constraint\");\nDEBUG */\n            c.active = false;\n            return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\n        }\n\n        private static createSplitBlock(startVar: Variable): Block {\n            var b = new Block(startVar);\n            b.populateSplitBlock(startVar, null);\n            return b;\n        }\n\n        // find a split point somewhere between the specified variables\n        splitBetween(vl: Variable, vr: Variable): { constraint: Constraint; lb: Block; rb: Block } {\n/* DEBUG\n            console.assert(vl.block === this);\n            console.assert(vr.block === this);\nDEBUG */\n            var c = this.findMinLMBetween(vl, vr);\n            if (c !== null) {\n                var bs = Block.split(c);\n                return { constraint: c, lb: bs[0], rb: bs[1] };\n            }\n            // couldn't find a split point - for example the active path is all equality constraints\n            return null;\n        }\n\n        mergeAcross(b: Block, c: Constraint, dist: number): void {\n            c.active = true;\n            for (var i = 0, n = b.vars.length; i < n; ++i) {\n                var v = b.vars[i];\n                v.offset += dist;\n                this.addVariable(v);\n            }\n            this.posn = this.ps.getPosn();\n        }\n\n        cost(): number {\n            var sum = 0, i = this.vars.length;\n            while (i--) {\n                var v = this.vars[i],\n                    d = v.position() - v.desiredPosition;\n                sum += d * d * v.weight;\n            }\n            return sum;\n        }\n\n/* DEBUG\n        toString(): string {\n            var cs = [];\n            this.traverse(c=> c.toString() + \"\\n\", cs)\n            return \"b\"+this.blockInd + \"@\" + this.posn + \": vars=\" + this.vars.map(v=> v.toString()+\":\"+v.offset) + \";\\n cons=\\n\" + cs;\n        }\nDEBUG */\n    }\n\n    export class Blocks {\n        private list: Block[];\n\n        constructor(public vs: Variable[]) {\n            var n = vs.length;\n            this.list = new Array(n);\n            while (n--) {\n                var b = new Block(vs[n]);\n                this.list[n] = b;\n                b.blockInd = n;\n            }\n        }\n\n        cost(): number {\n            var sum = 0, i = this.list.length;\n            while (i--) sum += this.list[i].cost();\n            return sum;\n        }\n\n        insert(b: Block) {\n/* DEBUG\n            console.assert(!this.contains(b), \"blocks error: tried to reinsert block \" + b.blockInd)\nDEBUG */\n            b.blockInd = this.list.length;\n            this.list.push(b);\n/* DEBUG\n            console.log(\"insert block: \" + b.blockInd);\n            this.contains(b);\nDEBUG */\n        }\n\n        remove(b: Block) {\n/* DEBUG\n            console.log(\"remove block: \" + b.blockInd);\n            console.assert(this.contains(b));\nDEBUG */\n            var last = this.list.length - 1;\n            var swapBlock = this.list[last];\n            this.list.length = last;\n            if (b !== swapBlock) {\n                this.list[b.blockInd] = swapBlock;\n                swapBlock.blockInd = b.blockInd;\n/* DEBUG\n                console.assert(this.contains(swapBlock));\nDEBUG */\n            }\n        }\n\n        // merge the blocks on either side of the specified constraint, by copying the smaller block into the larger\n        // and deleting the smaller.\n        merge(c: Constraint): void {\n            var l = c.left.block, r = c.right.block;\n/* DEBUG\n            console.assert(l!==r, \"attempt to merge within the same block\");\nDEBUG */\n            var dist = c.right.offset - c.left.offset - c.gap;\n            if (l.vars.length < r.vars.length) {\n                r.mergeAcross(l, c, dist);\n                this.remove(l);\n            } else {\n                l.mergeAcross(r, c, -dist);\n                this.remove(r);\n            }\n/* DEBUG\n            console.assert(Math.abs(c.slack()) < 1e-6, \"Error: Constraint should be at equality after merge!\");\n            console.log(\"merged on \" + c);\nDEBUG */\n        }\n\n        forEach(f: (b: Block, i: number) => void ) {\n            this.list.forEach(f);\n        }\n\n        // useful, for example, after variable desired positions change.\n        updateBlockPositions(): void {\n            this.list.forEach(b=> b.updateWeightedPosition());\n        }\n\n        // split each block across its constraint with the minimum lagrangian\n        split(inactive: Constraint[]): void {\n            this.updateBlockPositions();\n            this.list.forEach(b=> {\n                var v = b.findMinLM();\n                if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\n                    b = v.left.block;\n                    Block.split(v).forEach(nb=>this.insert(nb));\n                    this.remove(b);\n                    inactive.push(v);\n/* DEBUG\n                    console.assert(this.contains(v.left.block));\n                    console.assert(this.contains(v.right.block));\nDEBUG */\n                }\n            });\n        }\n\n/* DEBUG\n        // checks b is in the block, and does a sanity check over list index integrity\n        contains(b: Block): boolean {\n            var result = false;\n            this.list.forEach((bb, i) => {\n                if (bb.blockInd !== i) {\n                    console.error(\"blocks error, blockInd \" + b.blockInd + \" found at \" + i);\n                    return false;\n                }\n                result = result || b === bb;\n            });\n            return result;\n        }\n\n        toString(): string {\n            return this.list.toString();\n        }\nDEBUG */\n    }\n\n    export class Solver {\n        bs: Blocks;\n        inactive: Constraint[];\n\n        static LAGRANGIAN_TOLERANCE = -1e-4;\n        static ZERO_UPPERBOUND = -1e-10;\n\n        constructor(public vs: Variable[], public cs: Constraint[]) {\n            this.vs = vs;\n            vs.forEach(v => {\n                v.cIn = [], v.cOut = [];\n/* DEBUG\n                v.toString = () => \"v\" + vs.indexOf(v);\nDEBUG */\n            });\n            this.cs = cs;\n            cs.forEach(c => {\n                c.left.cOut.push(c);\n                c.right.cIn.push(c);\n/* DEBUG\n                c.toString = () => c.left + \"+\" + c.gap + \"<=\" + c.right + \" slack=\" + c.slack() + \" active=\" + c.active;\nDEBUG */\n            });\n            this.inactive = cs.map(c=> { c.active = false; return c; });\n            this.bs = null;\n        }\n\n        cost(): number {\n            return this.bs.cost();\n        }\n\n        // set starting positions without changing desired positions.\n        // Note: it throws away any previous block structure.\n        setStartingPositions(ps: Float32Array): void {\n            this.inactive = this.cs.map(c=> { c.active = false; return c; });\n            this.bs = new Blocks(this.vs);\n            this.bs.forEach((b, i) => b.posn = ps[i]);\n        }\n\n        setDesiredPositions(ps: Float32Array): void {\n            this.vs.forEach((v, i) => v.desiredPosition = ps[i]);\n        }\n\n/* DEBUG\n        private getId(v: Variable): number {\n            return this.vs.indexOf(v);\n        }\n\n        // sanity check of the index integrity of the inactive list\n        checkInactive(): void {\n            var inactiveCount = 0;\n            this.cs.forEach(c=> {\n                var i = this.inactive.indexOf(c);\n                console.assert(!c.active && i >= 0 || c.active && i < 0, \"constraint should be in the inactive list if it is not active: \" + c);\n                if (i >= 0) {\n                    inactiveCount++;\n                } else {\n                    console.assert(c.active, \"inactive constraint not found in inactive list: \" + c);\n                }\n            });\n            console.assert(inactiveCount === this.inactive.length, inactiveCount + \" inactive constraints found, \" + this.inactive.length + \"in inactive list\");\n        }\n        // after every call to satisfy the following should check should pass\n        checkSatisfied(): void {\n            this.cs.forEach(c=>console.assert(c.slack() >= vpsc.Solver.ZERO_UPPERBOUND, \"Error: Unsatisfied constraint! \"+c));\n        }\nDEBUG */\n\n        private mostViolated(): Constraint {\n            var minSlack = Number.MAX_VALUE,\n                v: Constraint = null,\n                l = this.inactive,\n                n = l.length,\n                deletePoint = n;\n            for (var i = 0; i < n; ++i) {\n                var c = l[i];\n                if (c.unsatisfiable) continue;\n                var slack = c.slack();\n                if (c.equality || slack < minSlack) {\n                    minSlack = slack;\n                    v = c;\n                    deletePoint = i;\n                    if (c.equality) break;\n                }\n            }\n            if (deletePoint !== n &&\n                (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality))\n            {\n                l[deletePoint] = l[n - 1];\n                l.length = n - 1;\n            }\n            return v;\n        }\n\n        // satisfy constraints by building block structure over violated constraints\n        // and moving the blocks to their desired positions\n        satisfy(): void {\n            if (this.bs == null) {\n                this.bs = new Blocks(this.vs);\n            }\n/* DEBUG\n            console.log(\"satisfy: \" + this.bs);\nDEBUG */\n            this.bs.split(this.inactive);\n            var v: Constraint = null;\n            while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\n                var lb = v.left.block, rb = v.right.block;\n/* DEBUG\n                console.log(\"most violated is: \" + v);\n                this.bs.contains(lb);\n                this.bs.contains(rb);\nDEBUG */\n                if (lb !== rb) {\n                    this.bs.merge(v);\n                } else {\n                    if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\n                        // cycle found!\n                        v.unsatisfiable = true;\n                        continue;\n                    }\n                    // constraint is within block, need to split first\n                    var split = lb.splitBetween(v.left, v.right);\n                    if (split !== null) {\n                        this.bs.insert(split.lb);\n                        this.bs.insert(split.rb);\n                        this.bs.remove(lb);\n                        this.inactive.push(split.constraint);\n                    } else {\n/* DEBUG\n                        console.log(\"unsatisfiable constraint found\");\nDEBUG */\n                        v.unsatisfiable = true;\n                        continue;\n                    }\n                    if (v.slack() >= 0) {\n/* DEBUG\n                        console.log(\"violated constraint indirectly satisfied: \" + v);\nDEBUG */\n                        // v was satisfied by the above split!\n                        this.inactive.push(v);\n                    } else {\n/* DEBUG\n                        console.log(\"merge after split:\");\nDEBUG */\n                        this.bs.merge(v);\n                    }\n                }\n/* DEBUG\n                this.bs.contains(v.left.block);\n                this.bs.contains(v.right.block);\n                this.checkInactive();\nDEBUG */\n            }\n/* DEBUG\n            this.checkSatisfied();\nDEBUG */\n        }\n\n        // repeatedly build and split block structure until we converge to an optimal solution\n        solve(): number {\n            this.satisfy();\n            var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\n            while (Math.abs(lastcost - cost) > 0.0001) {\n                this.satisfy();\n                lastcost = cost;\n                cost = this.bs.cost();\n            }\n            return cost;\n        }\n    }\n    /**\n      * Remove overlap between spans while keeping their centers as close as possible to the specified desiredCenters.\n      * Lower and upper bounds will be respected if the spans physically fit between them\n      * (otherwise they'll be moved and their new position returned).\n      * If no upper/lower bound is specified then the bounds of the moved spans will be returned.\n      * returns a new center for each span.\n      */\n    export function removeOverlapInOneDimension(spans: { size: number, desiredCenter: number }[], lowerBound?: number, upperBound?: number)\n        : { newCenters: number[], lowerBound: number, upperBound: number }\n    {\n        const vs: Variable[] = spans.map(s => new Variable(s.desiredCenter));\n        const cs: Constraint[] = [];\n        const n = spans.length;\n        for (var i = 0; i < n - 1; i++) {\n            const left = spans[i], right = spans[i + 1];\n            cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\n        }\n        const leftMost = vs[0],\n            rightMost = vs[n - 1],\n            leftMostSize = spans[0].size / 2,\n            rightMostSize = spans[n - 1].size / 2;\n        let vLower: Variable = null, vUpper: Variable = null;\n        if (lowerBound) {\n            vLower = new Variable(lowerBound, leftMost.weight * 1000);\n            vs.push(vLower);\n            cs.push(new Constraint(vLower, leftMost, leftMostSize));\n        }\n        if (upperBound) {\n            vUpper = new Variable(upperBound, rightMost.weight * 1000);\n            vs.push(vUpper);\n            cs.push(new Constraint(rightMost, vUpper, rightMostSize));\n        }\n        var solver = new Solver(vs, cs);\n        solver.solve();\n        return {\n            newCenters: vs.slice(0, spans.length).map(v => v.position()),\n            lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\n            upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\n        };\n    }\n","    //Based on js_es:\n    //\n    //https://github.com/vadimg/js_bintrees\n    //\n    //Copyright (C) 2011 by Vadim Graboys\n    //\n    //Permission is hereby granted, free of charge, to any person obtaining a copy\n    //of this software and associated documentation files (the \"Software\"), to deal\n    //in the Software without restriction, including without limitation the rights\n    //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    //copies of the Software, and to permit persons to whom the Software is\n    //furnished to do so, subject to the following conditions:\n    //\n    //The above copyright notice and this permission notice shall be included in\n    //all copies or substantial portions of the Software.\n    //\n    //THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    //THE SOFTWARE.\n    export class TreeBase {\n        _root;\n        size;\n        _comparator;\n        // removes all nodes from the tree\n        clear() {\n            this._root = null;\n            this.size = 0;\n        };\n\n        // returns node data if found, null otherwise\n        find(data) {\n            var res = this._root;\n\n            while (res !== null) {\n                var c = this._comparator(data, res.data);\n                if (c === 0) {\n                    return res.data;\n                }\n                else {\n                    res = res.get_child(c > 0);\n                }\n            }\n\n            return null;\n        };\n\n        // returns iterator to node if found, null otherwise\n        findIter = function (data) {\n            var res = this._root;\n            var iter = this.iterator();\n\n            while (res !== null) {\n                var c = this._comparator(data, res.data);\n                if (c === 0) {\n                    iter._cursor = res;\n                    return iter;\n                }\n                else {\n                    iter._ancestors.push(res);\n                    res = res.get_child(c > 0);\n                }\n            }\n\n            return null;\n        };\n\n        // Returns an interator to the tree node immediately before (or at) the element\n        lowerBound(data) {\n            return this._bound(data, this._comparator);\n        };\n\n        // Returns an interator to the tree node immediately after (or at) the element\n        upperBound(data) {\n            var cmp = this._comparator;\n\n            function reverse_cmp(a, b) {\n                return cmp(b, a);\n            }\n\n            return this._bound(data, reverse_cmp);\n        };\n\n        // returns null if tree is empty\n        min() {\n            var res = this._root;\n            if (res === null) {\n                return null;\n            }\n\n            while (res.left !== null) {\n                res = res.left;\n            }\n\n            return res.data;\n        };\n\n        // returns null if tree is empty\n        max() {\n            var res = this._root;\n            if (res === null) {\n                return null;\n            }\n\n            while (res.right !== null) {\n                res = res.right;\n            }\n\n            return res.data;\n        };\n\n        // returns a null iterator\n        // call next() or prev() to point to an element\n        iterator(): Iterator {\n            return new Iterator(this);\n        };\n\n        // calls cb on each node's data, in order\n        each(cb) {\n            var it = this.iterator(), data;\n            while ((data = it.next()) !== null) {\n                cb(data);\n            }\n        };\n\n        // calls cb on each node's data, in reverse order\n        reach(cb) {\n            var it = this.iterator(), data;\n            while ((data = it.prev()) !== null) {\n                cb(data);\n            }\n        };\n\n        // used for lowerBound and upperBound\n        _bound(data, cmp) {\n            var cur = this._root;\n            var iter = this.iterator();\n\n            while (cur !== null) {\n                var c = this._comparator(data, cur.data);\n                if (c === 0) {\n                    iter._cursor = cur;\n                    return iter;\n                }\n                iter._ancestors.push(cur);\n                cur = cur.get_child(c > 0);\n            }\n\n            for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n                cur = iter._ancestors[i];\n                if (cmp(data, cur.data) > 0) {\n                    iter._cursor = cur;\n                    iter._ancestors.length = i;\n                    return iter;\n                }\n            }\n\n            iter._ancestors.length = 0;\n            return iter;\n        };\n    }\n    export class Iterator {\n        _tree;\n        _ancestors;\n        _cursor;\n        constructor(tree) {\n            this._tree = tree;\n            this._ancestors = [];\n            this._cursor = null;\n        }\n\n        data() {\n            return this._cursor !== null ? this._cursor.data : null;\n        };\n\n        // if null-iterator, returns first node\n        // otherwise, returns next node\n        next() {\n            if (this._cursor === null) {\n                var root = this._tree._root;\n                if (root !== null) {\n                    this._minNode(root);\n                }\n            }\n            else {\n                if (this._cursor.right === null) {\n                    // no greater node in subtree, go up to parent\n                    // if coming from a right child, continue up the stack\n                    var save;\n                    do {\n                        save = this._cursor;\n                        if (this._ancestors.length) {\n                            this._cursor = this._ancestors.pop();\n                        }\n                        else {\n                            this._cursor = null;\n                            break;\n                        }\n                    } while (this._cursor.right === save);\n                }\n                else {\n                    // get the next node from the subtree\n                    this._ancestors.push(this._cursor);\n                    this._minNode(this._cursor.right);\n                }\n            }\n            return this._cursor !== null ? this._cursor.data : null;\n        };\n\n        // if null-iterator, returns last node\n        // otherwise, returns previous node\n        prev() {\n            if (this._cursor === null) {\n                var root = this._tree._root;\n                if (root !== null) {\n                    this._maxNode(root);\n                }\n            }\n            else {\n                if (this._cursor.left === null) {\n                    var save;\n                    do {\n                        save = this._cursor;\n                        if (this._ancestors.length) {\n                            this._cursor = this._ancestors.pop();\n                        }\n                        else {\n                            this._cursor = null;\n                            break;\n                        }\n                    } while (this._cursor.left === save);\n                }\n                else {\n                    this._ancestors.push(this._cursor);\n                    this._maxNode(this._cursor.left);\n                }\n            }\n            return this._cursor !== null ? this._cursor.data : null;\n        };\n\n        _minNode(start) {\n            while (start.left !== null) {\n                this._ancestors.push(start);\n                start = start.left;\n            }\n            this._cursor = start;\n        };\n\n        _maxNode(start) {\n            while (start.right !== null) {\n                this._ancestors.push(start);\n                start = start.right;\n            }\n            this._cursor = start;\n        };\n    }\n\n    class Node {\n        data;\n        left;\n        right;\n        red;\n        constructor(data) {\n            this.data = data;\n            this.left = null;\n            this.right = null;\n            this.red = true;\n        }\n\n        get_child(dir) {\n            return dir ? this.right : this.left;\n        };\n\n        set_child(dir, val) {\n            if (dir) {\n                this.right = val;\n            }\n            else {\n                this.left = val;\n            }\n        };\n    }\n\n    export class RBTree<T> extends TreeBase {\n\n        _root;\n        _comparator;\n        size;\n        constructor(comparator: (a: T, b: T) => number) {\n            super();\n            this._root = null;\n            this._comparator = comparator;\n            this.size = 0;\n        }\n\n        // returns true if inserted, false if duplicate\n        insert(data) {\n            var ret = false;\n\n            if (this._root === null) {\n                // empty tree\n                this._root = new Node(data);\n                ret = true;\n                this.size++;\n            }\n            else {\n                var head = new Node(undefined); // fake tree root\n\n                var dir = false;\n                var last = false;\n\n                // setup\n                var gp = null; // grandparent\n                var ggp = head; // grand-grand-parent\n                var p = null; // parent\n                var node = this._root;\n                ggp.right = this._root;\n\n                // search down\n                while (true) {\n                    if (node === null) {\n                        // insert new node at the bottom\n                        node = new Node(data);\n                        p.set_child(dir, node);\n                        ret = true;\n                        this.size++;\n                    }\n                    else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {\n                        // color flip\n                        node.red = true;\n                        node.left.red = false;\n                        node.right.red = false;\n                    }\n\n                    // fix red violation\n                    if (RBTree.is_red(node) && RBTree.is_red(p)) {\n                        var dir2 = ggp.right === gp;\n\n                        if (node === p.get_child(last)) {\n                            ggp.set_child(dir2, RBTree.single_rotate(gp, !last));\n                        }\n                        else {\n                            ggp.set_child(dir2, RBTree.double_rotate(gp, !last));\n                        }\n                    }\n\n                    var cmp = this._comparator(node.data, data);\n\n                    // stop if found\n                    if (cmp === 0) {\n                        break;\n                    }\n\n                    last = dir;\n                    dir = cmp < 0;\n\n                    // update helpers\n                    if (gp !== null) {\n                        ggp = gp;\n                    }\n                    gp = p;\n                    p = node;\n                    node = node.get_child(dir);\n                }\n\n                // update root\n                this._root = head.right;\n            }\n\n            // make root black\n            this._root.red = false;\n\n            return ret;\n        };\n\n        // returns true if removed, false if not found\n        remove(data) {\n            if (this._root === null) {\n                return false;\n            }\n\n            var head = new Node(undefined); // fake tree root\n            var node = head;\n            node.right = this._root;\n            var p = null; // parent\n            var gp = null; // grand parent\n            var found = null; // found item\n            var dir = true;\n\n            while (node.get_child(dir) !== null) {\n                var last = dir;\n\n                // update helpers\n                gp = p;\n                p = node;\n                node = node.get_child(dir);\n\n                var cmp = this._comparator(data, node.data);\n\n                dir = cmp > 0;\n\n                // save found node\n                if (cmp === 0) {\n                    found = node;\n                }\n\n                // push the red node down\n                if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {\n                    if (RBTree.is_red(node.get_child(!dir))) {\n                        var sr = RBTree.single_rotate(node, dir);\n                        p.set_child(last, sr);\n                        p = sr;\n                    }\n                    else if (!RBTree.is_red(node.get_child(!dir))) {\n                        var sibling = p.get_child(!last);\n                        if (sibling !== null) {\n                            if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {\n                                // color flip\n                                p.red = false;\n                                sibling.red = true;\n                                node.red = true;\n                            }\n                            else {\n                                var dir2 = gp.right === p;\n\n                                if (RBTree.is_red(sibling.get_child(last))) {\n                                    gp.set_child(dir2, RBTree.double_rotate(p, last));\n                                }\n                                else if (RBTree.is_red(sibling.get_child(!last))) {\n                                    gp.set_child(dir2, RBTree.single_rotate(p, last));\n                                }\n\n                                // ensure correct coloring\n                                var gpc = gp.get_child(dir2);\n                                gpc.red = true;\n                                node.red = true;\n                                gpc.left.red = false;\n                                gpc.right.red = false;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // replace and remove if found\n            if (found !== null) {\n                found.data = node.data;\n                p.set_child(p.right === node, node.get_child(node.left === null));\n                this.size--;\n            }\n\n            // update root and make it black\n            this._root = head.right;\n            if (this._root !== null) {\n                this._root.red = false;\n            }\n\n            return found !== null;\n        };\n\n        static is_red(node) {\n            return node !== null && node.red;\n        }\n\n        static single_rotate(root, dir) {\n            var save = root.get_child(!dir);\n\n            root.set_child(!dir, save.get_child(dir));\n            save.set_child(dir, root);\n\n            root.red = true;\n            save.red = false;\n\n            return save;\n        }\n\n        static double_rotate(root, dir) {\n            root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));\n            return RBTree.single_rotate(root, dir);\n        }\n    }\n","import {Constraint, Variable, Solver} from './vpsc'\nimport {RBTree} from './rbtree'\nimport {Point} from './geom'\n\n    export interface Leaf {\n        bounds: Rectangle;\n        variable: Variable;\n    }\n\n    export interface ProjectionGroup {\n        bounds: Rectangle;\n        padding: number;\n        stiffness: number;\n        leaves: Leaf[];\n        groups: ProjectionGroup[];\n        minVar: Variable;\n        maxVar: Variable;\n    }\n\n    export function computeGroupBounds(g: ProjectionGroup): Rectangle {\n        g.bounds = typeof g.leaves !== \"undefined\" ?\n            g.leaves.reduce((r: Rectangle, c) => c.bounds.union(r), Rectangle.empty()) :\n            Rectangle.empty();\n        if (typeof g.groups !== \"undefined\")\n            g.bounds = <Rectangle>g.groups.reduce((r: Rectangle, c) => computeGroupBounds(c).union(r), g.bounds);\n        g.bounds = g.bounds.inflate(g.padding);\n        return g.bounds;\n    }\n\n    export class Rectangle {\n        constructor(\n            public x: number,\n            public X: number,\n            public y: number,\n            public Y: number) { }\n\n        static empty(): Rectangle { return new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY); }\n\n        cx(): number { return (this.x + this.X) / 2; }\n\n        cy(): number { return (this.y + this.Y) / 2; }\n\n        overlapX(r: Rectangle): number {\n            var ux = this.cx(), vx = r.cx();\n            if (ux <= vx && r.x < this.X) return this.X - r.x;\n            if (vx <= ux && this.x < r.X) return r.X - this.x;\n            return 0;\n        }\n\n        overlapY(r: Rectangle): number {\n            var uy = this.cy(), vy = r.cy();\n            if (uy <= vy && r.y < this.Y) return this.Y - r.y;\n            if (vy <= uy && this.y < r.Y) return r.Y - this.y;\n            return 0;\n        }\n\n        setXCentre(cx: number): void {\n            var dx = cx - this.cx();\n            this.x += dx;\n            this.X += dx;\n        }\n\n        setYCentre(cy: number): void {\n            var dy = cy - this.cy();\n            this.y += dy;\n            this.Y += dy;\n        }\n\n        width(): number {\n            return this.X - this.x;\n        }\n\n        height(): number {\n            return this.Y - this.y;\n        }\n\n        union(r: Rectangle): Rectangle {\n            return new Rectangle(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));\n        }\n\n        /**\n         * return any intersection points between the given line and the sides of this rectangle\n         * @method lineIntersection\n         * @param x1 number first x coord of line\n         * @param y1 number first y coord of line\n         * @param x2 number second x coord of line\n         * @param y2 number second y coord of line\n         * @return any intersection points found\n         */\n        lineIntersections(x1: number, y1: number, x2: number, y2: number): Array<Point> {\n            var sides = [[this.x, this.y, this.X, this.y],\n                    [this.X, this.y, this.X, this.Y],\n                    [this.X, this.Y, this.x, this.Y],\n                [this.x, this.Y, this.x, this.y]];\n            var intersections = [];\n            for (var i = 0; i < 4; ++i) {\n                var r = Rectangle.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);\n                if (r !== null) intersections.push({ x: r.x, y: r.y });\n            }\n            return intersections;\n        }\n\n        /**\n         * return any intersection points between a line extending from the centre of this rectangle to the given point,\n         *  and the sides of this rectangle\n         * @method lineIntersection\n         * @param x2 number second x coord of line\n         * @param y2 number second y coord of line\n         * @return any intersection points found\n         */\n        rayIntersection(x2: number, y2: number): Point {\n            var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);\n            return ints.length > 0 ? ints[0] : null;\n        }\n\n        vertices(): Point[] {\n            return [\n                { x: this.x, y: this.y },\n                { x: this.X, y: this.y },\n                { x: this.X, y: this.Y },\n                { x: this.x, y: this.Y }];\n        }\n\n        static lineIntersection(\n            x1: number, y1: number,\n            x2: number, y2: number,\n            x3: number, y3: number,\n            x4: number, y4: number): Point {\n            var dx12 = x2 - x1, dx34 = x4 - x3,\n                dy12 = y2 - y1, dy34 = y4 - y3,\n                denominator = dy34 * dx12 - dx34 * dy12;\n            if (denominator == 0) return null;\n            var dx31 = x1 - x3, dy31 = y1 - y3,\n                numa = dx34 * dy31 - dy34 * dx31,\n                a = numa / denominator,\n                numb = dx12 * dy31 - dy12 * dx31,\n                b = numb / denominator;\n            if (a >= 0 && a <= 1 && b >= 0 && b <= 1) {\n                return {\n                    x: x1 + a * dx12,\n                    y: y1 + a * dy12\n                };\n            }\n            return null;\n        }\n\n        inflate(pad: number): Rectangle {\n            return new Rectangle(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);\n        }\n    }\n\n    /**\n     * Returns the endpoints of a line that connects the centre of two rectangles.\n     * @param {Rectangle} [source] The source Rectangle.\n     * @param {Rectangle} [target] The target Rectangle.\n     * @param {number} [ah] The size of the arrow head, a distance to shorten the\n     *                      line by.\n     * @return An object with three point properties, the intersection with the\n     *         source rectangle (sourceIntersection), the intersection with then\n     *         target rectangle (targetIntersection), and the point an arrow\n     *         head of the specified size would need to start (arrowStart).\n     */\n    export function makeEdgeBetween(source: Rectangle, target: Rectangle, ah: number)\n        : { sourceIntersection: Point; targetIntersection: Point; arrowStart: Point } {\n        const si = source.rayIntersection(target.cx(), target.cy()) || { x: source.cx(), y: source.cy() },\n            ti = target.rayIntersection(source.cx(), source.cy()) || { x: target.cx(), y: target.cy() },\n            dx = ti.x - si.x,\n            dy = ti.y - si.y,\n            l = Math.sqrt(dx * dx + dy * dy), al = l - ah;\n        return {\n            sourceIntersection: si,\n            targetIntersection: ti,\n            arrowStart: { x: si.x + al * dx / l, y: si.y + al * dy / l }\n        }\n    }\n\n    /**\n     * Returns the intersection of a line from the given point to the centre\n     * of the target rectangle where it intersects the rectanngle.\n     * @param [source] The source point.\n     * @param {Rectangle} [target] The target Rectangle.\n     * @param {number} [ah] The size of the arrow head, a distance to shorten the\n     *                      line by.\n     * @return The point an arrow head of the specified size would need to start.\n     */\n    export function makeEdgeTo(s: { x: number; y: number }, target: Rectangle, ah: number): Point {\n        var ti = target.rayIntersection(s.x, s.y);\n        if (!ti) ti = { x: target.cx(), y: target.cy() };\n        var dx = ti.x - s.x,\n            dy = ti.y - s.y,\n            l = Math.sqrt(dx * dx + dy * dy);\n        return { x: ti.x - ah * dx / l, y: ti.y - ah * dy / l };\n    }\n\n    class Node {\n        prev: RBTree<Node>;\n        next: RBTree<Node>;\n\n        constructor(public v: Variable, public r: Rectangle, public pos: number) {\n            this.prev = makeRBTree();\n            this.next = makeRBTree();\n        }\n    }\n\n    class Event {\n        constructor(public isOpen: boolean, public v: Node, public pos: number) {}\n    }\n\n    function compareEvents(a: Event, b: Event): number {\n        if (a.pos > b.pos) {\n            return 1;\n        }\n        if (a.pos < b.pos) {\n            return -1;\n        }\n        if (a.isOpen) {\n            // open must come before close\n            return -1;\n        }\n        if (b.isOpen) {\n            // open must come before close\n            return 1;\n        }\n        return 0;\n    }\n\n    function makeRBTree(): RBTree<Node> {\n        return new RBTree<Node>((a, b) => a.pos - b.pos);\n    }\n\n    interface RectAccessors {\n        getCentre: (r: Rectangle) => number;\n        getOpen: (r: Rectangle) => number;\n        getClose: (r: Rectangle) => number;\n        getSize: (r: Rectangle) => number;\n        makeRect: (open: number, close: number, center: number, size: number) => Rectangle;\n        findNeighbours: (v: Node, scanline: RBTree<Node>) => void;\n    }\n\n    var xRect: RectAccessors = {\n        getCentre: r=> r.cx(),\n        getOpen: r=> r.y,\n        getClose: r=> r.Y,\n        getSize: r=> r.width(),\n        makeRect: (open, close, center, size) => new Rectangle(center - size / 2, center + size / 2, open, close) ,\n        findNeighbours: findXNeighbours\n    };\n\n    var yRect: RectAccessors = {\n        getCentre: r=> r.cy(),\n        getOpen: r=> r.x,\n        getClose: r=> r.X,\n        getSize: r=> r.height(),\n        makeRect: (open, close, center, size) => new Rectangle(open, close, center - size / 2, center + size / 2),\n        findNeighbours: findYNeighbours\n    };\n\n    function generateGroupConstraints(root: ProjectionGroup, f: RectAccessors, minSep: number, isContained: boolean = false): Constraint[]\n    {\n        var padding = root.padding,\n            gn = typeof root.groups !== 'undefined' ? root.groups.length : 0,\n            ln = typeof root.leaves !== 'undefined' ? root.leaves.length : 0,\n            childConstraints: Constraint[] = !gn ? []\n            : root.groups.reduce((ccs: Constraint[], g) => ccs.concat(generateGroupConstraints(g, f, minSep, true)), []),\n            n = (isContained ? 2 : 0) + ln + gn,\n            vs: Variable[] = new Array(n),\n            rs: Rectangle[] = new Array(n),\n            i = 0,\n            add = (r, v) => { rs[i] = r; vs[i++] = v };\n        if (isContained) {\n            // if this group is contained by another, then we add two dummy vars and rectangles for the borders\n            var b: Rectangle = root.bounds,\n                c = f.getCentre(b), s = f.getSize(b) / 2,\n                open = f.getOpen(b), close = f.getClose(b),\n                min = c - s + padding / 2, max = c + s - padding / 2;\n            root.minVar.desiredPosition = min;\n            add(f.makeRect(open, close, min, padding), root.minVar);\n            root.maxVar.desiredPosition = max;\n            add(f.makeRect(open, close, max, padding), root.maxVar);\n        }\n        if (ln) root.leaves.forEach(l => add(l.bounds, l.variable));\n        if (gn) root.groups.forEach(g => {\n            var b: Rectangle = g.bounds;\n            add(f.makeRect(f.getOpen(b), f.getClose(b), f.getCentre(b), f.getSize(b)), g.minVar);\n        });\n        var cs = generateConstraints(rs, vs, f, minSep);\n        if (gn) {\n            vs.forEach(v => { v.cOut = [], v.cIn = [] });\n            cs.forEach(c => { c.left.cOut.push(c), c.right.cIn.push(c) });\n            root.groups.forEach(g => {\n                var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;\n                g.minVar.cIn.forEach(c => c.gap += gapAdjustment);\n                g.minVar.cOut.forEach(c => { c.left = g.maxVar; c.gap += gapAdjustment; });\n            });\n        }\n        return childConstraints.concat(cs);\n    }\n\n    function generateConstraints(rs: Rectangle[], vars: Variable[],\n        rect: RectAccessors, minSep: number): Constraint[]\n    {\n        var i, n = rs.length;\n        var N = 2 * n;\n        console.assert(vars.length >= n);\n        var events = new Array<Event>(N);\n        for (i = 0; i < n; ++i) {\n            var r = rs[i];\n            var v = new Node(vars[i], r, rect.getCentre(r));\n            events[i] = new Event(true, v, rect.getOpen(r));\n            events[i + n] = new Event(false, v, rect.getClose(r));\n        }\n        events.sort(compareEvents);\n        var cs = new Array<Constraint>();\n        var scanline = makeRBTree();\n        for (i = 0; i < N; ++i) {\n            var e = events[i];\n            var v = e.v;\n            if (e.isOpen) {\n                scanline.insert(v);\n                rect.findNeighbours(v, scanline);\n            } else {\n                // close event\n                scanline.remove(v);\n                var makeConstraint = (l, r) => {\n                    var sep = (rect.getSize(l.r) + rect.getSize(r.r)) / 2 + minSep;\n                    cs.push(new Constraint(l.v, r.v, sep));\n                };\n                var visitNeighbours = (forward, reverse, mkcon) => {\n                    var u, it = v[forward].iterator();\n                    while ((u = it[forward]()) !== null) {\n                        mkcon(u, v);\n                        u[reverse].remove(v);\n                    }\n                };\n                visitNeighbours(\"prev\", \"next\", (u, v) => makeConstraint(u, v));\n                visitNeighbours(\"next\", \"prev\", (u, v) => makeConstraint(v, u));\n            }\n        }\n        console.assert(scanline.size === 0);\n        return cs;\n    }\n\n    function findXNeighbours(v: Node, scanline: RBTree<Node>): void {\n        var f = (forward, reverse) => {\n            var it = scanline.findIter(v);\n            var u;\n            while ((u = it[forward]()) !== null) {\n                var uovervX = u.r.overlapX(v.r);\n                if (uovervX <= 0 || uovervX <= u.r.overlapY(v.r)) {\n                    v[forward].insert(u);\n                    u[reverse].insert(v);\n                }\n                if (uovervX <= 0) {\n                    break;\n                }\n            }\n        }\n        f(\"next\", \"prev\");\n        f(\"prev\", \"next\");\n    }\n\n    function findYNeighbours(v: Node, scanline: RBTree<Node>): void {\n        var f = (forward, reverse) => {\n            var u = scanline.findIter(v)[forward]();\n            if (u !== null && u.r.overlapX(v.r) > 0) {\n                v[forward].insert(u);\n                u[reverse].insert(v);\n            }\n        }\n        f(\"next\", \"prev\");\n        f(\"prev\", \"next\");\n    }\n\n    export function generateXConstraints(rs: Rectangle[], vars: Variable[]): Constraint[] {\n        return generateConstraints(rs, vars, xRect, 1e-6);\n    }\n\n    export function generateYConstraints(rs: Rectangle[], vars: Variable[]): Constraint[] {\n        return generateConstraints(rs, vars, yRect, 1e-6);\n    }\n\n    export function generateXGroupConstraints(root: ProjectionGroup): Constraint[] {\n        return generateGroupConstraints(root, xRect, 1e-6);\n    }\n\n    export function generateYGroupConstraints(root: ProjectionGroup): Constraint[] {\n        return generateGroupConstraints(root, yRect, 1e-6);\n    }\n\n    export function removeOverlaps(rs: Rectangle[]): void {\n        var vs = rs.map(r => new Variable(r.cx()));\n        var cs = generateXConstraints(rs, vs);\n        var solver = new Solver(vs, cs);\n        solver.solve();\n        vs.forEach((v, i) => rs[i].setXCentre(v.position()));\n        vs = rs.map(r=> new Variable(r.cy()));\n        cs = generateYConstraints(rs, vs);\n        solver = new Solver(vs, cs);\n        solver.solve();\n        vs.forEach((v, i) => rs[i].setYCentre(v.position()));\n    }\n\n    export interface GraphNode extends Leaf {\n        fixed: boolean;\n        fixedWeight?: number;\n        width: number;\n        height: number;\n        x: number;\n        y: number;\n        px: number;\n        py: number;\n    }\n\n    export class IndexedVariable extends Variable {\n        constructor(public index: number, w: number) {\n            super(0, w);\n        }\n    }\n\n    export class Projection {\n        private xConstraints: Constraint[];\n        private yConstraints: Constraint[];\n        private variables: Variable[];\n\n        constructor(private nodes: GraphNode[],\n            private groups: ProjectionGroup[],\n            private rootGroup: ProjectionGroup = null,\n            constraints: any[]= null,\n            private avoidOverlaps: boolean = false)\n        {\n            this.variables = nodes.map((v, i) => {\n                return v.variable = new IndexedVariable(i, 1);\n            });\n\n            if (constraints) this.createConstraints(constraints);\n\n            if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== 'undefined') {\n                nodes.forEach(v => {\n\t\t\t\t\tif (!v.width || !v.height)\n\t\t\t\t\t{\n\t\t\t\t\t\t//If undefined, default to nothing\n\t\t\t\t\t\tv.bounds = new Rectangle(v.x, v.x, v.y, v.y);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n                    var w2 = v.width / 2, h2 = v.height / 2;\n                    v.bounds = new Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);\n                });\n                computeGroupBounds(rootGroup);\n                var i = nodes.length;\n                groups.forEach(g => {\n                    this.variables[i] = g.minVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\n                    this.variables[i] = g.maxVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\n                });\n            }\n        }\n\n\n        private createSeparation(c: any) : Constraint {\n            return new Constraint(\n                this.nodes[c.left].variable,\n                this.nodes[c.right].variable,\n                c.gap,\n                typeof c.equality !== \"undefined\" ? c.equality : false);\n        }\n\n        // simple satisfaction of alignment constraints to ensure initial feasibility\n        private makeFeasible(c: any) {\n            if (!this.avoidOverlaps) return;\n            // sort nodes in constraint by position (along \"guideline\")\n            var axis = 'x', dim = 'width';\n            if (c.axis === 'x') axis = 'y', dim = 'height';\n            var vs: GraphNode[] = c.offsets.map(o => this.nodes[o.node]).sort((a, b) => a[axis] - b[axis]);\n            var p: GraphNode = null;\n            vs.forEach(v => {\n                // if two nodes overlap then shove the second one along\n                if (p) {\n                    let nextPos = p[axis] + p[dim];\n                    if (nextPos > v[axis]) {\n                        v[axis] = nextPos;\n                    }\n                }\n                p = v;\n            });\n        }\n\n        private createAlignment(c: any) {\n            var u = this.nodes[c.offsets[0].node].variable;\n            this.makeFeasible(c);\n            var cs = c.axis === 'x' ? this.xConstraints : this.yConstraints;\n            c.offsets.slice(1).forEach(o => {\n                var v = this.nodes[o.node].variable;\n                cs.push(new Constraint(u, v, o.offset, true));\n            });\n        }\n\n        private createConstraints(constraints: any[]) {\n            var isSep = c => typeof c.type === 'undefined' || c.type === 'separation';\n            this.xConstraints = constraints\n                .filter(c => c.axis === \"x\" && isSep(c))\n                .map(c => this.createSeparation(c));\n            this.yConstraints = constraints\n                .filter(c => c.axis === \"y\" && isSep(c))\n                .map(c => this.createSeparation(c));\n            constraints\n                .filter(c => c.type === 'alignment')\n                .forEach(c => this.createAlignment(c));\n        }\n\n        private setupVariablesAndBounds(x0: Float32Array, y0: Float32Array, desired: Float32Array, getDesired: (v: GraphNode) => number) {\n            this.nodes.forEach((v, i) => {\n                if (v.fixed) {\n                    v.variable.weight = v.fixedWeight ? v.fixedWeight : 1000;\n                    desired[i] = getDesired(v);\n                } else {\n                    v.variable.weight = 1;\n                }\n                var w = (v.width || 0) / 2, h = (v.height || 0) / 2;\n                var ix = x0[i], iy = y0[i];\n                v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);\n            });\n        }\n\n        xProject(x0: Float32Array, y0: Float32Array, x: Float32Array) {\n            if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints)) return;\n            this.project(x0, y0, x0, x, v=> v.px, this.xConstraints, generateXGroupConstraints,\n                v => v.bounds.setXCentre(x[(<IndexedVariable>v.variable).index] = v.variable.position()),\n                g => {\n                    var xmin = x[(<IndexedVariable>g.minVar).index] = g.minVar.position();\n                    var xmax = x[(<IndexedVariable>g.maxVar).index] = g.maxVar.position();\n                    var p2 = g.padding / 2;\n                    g.bounds.x = xmin - p2;\n                    g.bounds.X = xmax + p2;\n                });\n        }\n\n        yProject(x0: Float32Array, y0: Float32Array, y: Float32Array) {\n            if (!this.rootGroup && !this.yConstraints) return;\n            this.project(x0, y0, y0, y, v=> v.py, this.yConstraints, generateYGroupConstraints,\n                v => v.bounds.setYCentre(y[(<IndexedVariable>v.variable).index] = v.variable.position()),\n                g => {\n                    var ymin = y[(<IndexedVariable>g.minVar).index] = g.minVar.position();\n                    var ymax = y[(<IndexedVariable>g.maxVar).index] = g.maxVar.position();\n                    var p2 = g.padding / 2;\n                    g.bounds.y = ymin - p2;;\n                    g.bounds.Y = ymax + p2;\n                });\n        }\n\n        projectFunctions(): { (x0: Float32Array, y0: Float32Array, r: Float32Array): void }[]{\n            return [\n                (x0, y0, x) => this.xProject(x0, y0, x),\n                (x0, y0, y) => this.yProject(x0, y0, y)\n            ];\n        }\n\n        private project(x0: Float32Array, y0: Float32Array, start: Float32Array, desired: Float32Array,\n            getDesired: (v: GraphNode) => number,\n            cs: Constraint[],\n            generateConstraints: (g: ProjectionGroup) => Constraint[],\n            updateNodeBounds: (v: GraphNode) => any,\n            updateGroupBounds: (g: ProjectionGroup) => any)\n        {\n            this.setupVariablesAndBounds(x0, y0, desired, getDesired);\n            if (this.rootGroup && this.avoidOverlaps) {\n                computeGroupBounds(this.rootGroup);\n                cs = cs.concat(generateConstraints(this.rootGroup));\n            }\n            this.solve(this.variables, cs, start, desired);\n            this.nodes.forEach(updateNodeBounds);\n            if (this.rootGroup && this.avoidOverlaps) {\n                this.groups.forEach(updateGroupBounds);\n                computeGroupBounds(this.rootGroup);\n            }\n        }\n\n        private solve(vs: Variable[], cs: Constraint[], starting: Float32Array, desired: Float32Array) {\n            var solver = new Solver(vs, cs);\n            solver.setStartingPositions(starting);\n            solver.setDesiredPositions(desired);\n            solver.solve();\n        }\n    }\n","\nexport class PairingHeap<T> {\n    private subheaps : PairingHeap<T>[];\n    // from: https://gist.github.com/nervoussystem\n    //{elem:object, subheaps:[array of heaps]}\n    constructor(public elem: T) {\n        this.subheaps = [];\n    }\n\n    public toString(selector) : string {\n        var str = \"\", needComma = false;\n        for (var i = 0; i < this.subheaps.length; ++i) {\n            var subheap: PairingHeap<T> = this.subheaps[i];\n            if (!subheap.elem) {\n                needComma = false;\n                continue;\n            }\n            if (needComma) {\n                str = str + \",\";\n            }\n            str = str + subheap.toString(selector);\n            needComma = true;\n        }\n        if (str !== \"\") {\n            str = \"(\" + str + \")\";\n        }\n        return (this.elem ? selector(this.elem) : \"\") + str;\n    }\n\n    public forEach(f) {\n        if (!this.empty()) {\n            f(this.elem, this);\n            this.subheaps.forEach(s => s.forEach(f));\n        }\n    }\n\n    public count(): number {\n        return this.empty() ? 0 : 1 + this.subheaps.reduce((n: number, h: PairingHeap<T>) => {\n            return n + h.count();\n        }, 0);\n    }\n\n    public min() : T {\n        return this.elem;\n    }\n\n    public empty() : boolean {\n        return this.elem == null;\n    }\n\n    public contains(h: PairingHeap<T>): boolean {\n        if (this === h) return true;\n        for (var i = 0; i < this.subheaps.length; i++) {\n            if (this.subheaps[i].contains(h)) return true;\n        }\n        return false;\n    }\n\n    public isHeap(lessThan: (a: T, b: T) => boolean): boolean {\n        return this.subheaps.every(h=> lessThan(this.elem, h.elem) && h.isHeap(lessThan));\n    }\n\n    public insert(obj : T, lessThan) : PairingHeap<T> {\n        return this.merge(new PairingHeap<T>(obj), lessThan);\n    }\n\n    public merge(heap2: PairingHeap<T>, lessThan): PairingHeap<T> {\n        if (this.empty()) return heap2;\n        else if (heap2.empty()) return this;\n        else if (lessThan(this.elem, heap2.elem)) {\n            this.subheaps.push(heap2);\n            return this;\n        } else {\n            heap2.subheaps.push(this);\n            return heap2;\n        }\n    }\n\n    public removeMin(lessThan: (a: T, b: T) => boolean): PairingHeap<T> {\n        if (this.empty()) return null;\n        else return this.mergePairs(lessThan);\n    }\n\n    public mergePairs(lessThan: (a: T, b: T) => boolean) : PairingHeap<T> {\n        if (this.subheaps.length == 0) return new PairingHeap<T>(null);\n        else if (this.subheaps.length == 1) { return this.subheaps[0]; }\n        else {\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\n            var remaining = this.mergePairs(lessThan);\n            return firstPair.merge(remaining, lessThan);\n        }\n    }\n    public decreaseKey(subheap: PairingHeap<T>, newValue: T, setHeapNode: (e: T, h: PairingHeap<T>)=>void, lessThan: (a: T, b: T) => boolean): PairingHeap<T> {\n        var newHeap = subheap.removeMin(lessThan);\n        //reassign subheap values to preserve tree\n        subheap.elem = newHeap.elem;\n        subheap.subheaps = newHeap.subheaps;\n        if (setHeapNode !== null && newHeap.elem !== null) {\n            setHeapNode(subheap.elem, subheap);\n        }\n        var pairingNode = new PairingHeap(newValue);\n        if (setHeapNode !== null) {\n            setHeapNode(newValue, pairingNode);\n        }\n        return this.merge(pairingNode, lessThan);\n    }\n}\n\n/**\n * @class PriorityQueue a min priority queue backed by a pairing heap\n */\nexport class PriorityQueue<T> {\n    private root : PairingHeap<T>;\n    constructor(private lessThan: (a: T, b: T) => boolean) { }\n    /**\n     * @method top\n     * @return the top element (the min element as defined by lessThan)\n     */\n    public top() : T {\n        if (this.empty()) { return null; }\n        return this.root.elem;\n    }\n    /**\n     * @method push\n     * put things on the heap\n     */\n    public push(...args: T[]): PairingHeap<T> {\n        var pairingNode;\n        for (var i = 0, arg; arg=args[i]; ++i) {\n            pairingNode = new PairingHeap(arg);\n            this.root = this.empty() ?\n                pairingNode : this.root.merge(pairingNode, this.lessThan);\n        }\n        return pairingNode;\n    }\n    /**\n     * @method empty\n     * @return true if no more elements in queue\n     */\n    public empty(): boolean {\n        return !this.root || !this.root.elem;\n    }\n    /**\n     * @method isHeap check heap condition (for testing)\n     * @return true if queue is in valid state\n     */\n    public isHeap(): boolean {\n        return this.root.isHeap(this.lessThan);\n    }\n    /**\n     * @method forEach apply f to each element of the queue\n     * @param f function to apply\n     */\n    public forEach(f) {\n        this.root.forEach(f);\n    }\n    /**\n     * @method pop remove and return the min element from the queue\n     */\n    public pop(): T {\n        if (this.empty()) {\n            return null;\n        }\n        var obj = this.root.min();\n        this.root = this.root.removeMin(this.lessThan);\n        return obj;\n    }\n    /**\n     * @method reduceKey reduce the key value of the specified heap node\n     */\n    public reduceKey(heapNode: PairingHeap<T>, newKey: T, setHeapNode: (e: T, h: PairingHeap<T>)=>void = null): void {\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\n    }\n    public toString(selector) {\n        return this.root.toString(selector);\n    }\n    /**\n     * @method count\n     * @return number of elements in queue\n     */\n    public count() {\n        return this.root.count();\n    }\n}\n","import {PairingHeap, PriorityQueue} from './pqueue'\n\nclass Neighbour {\n    constructor(public id: number, public distance: number) { }\n}\n\nclass Node {\n    constructor(public id: number) {\n        this.neighbours = [];\n    }\n    neighbours: Neighbour[];\n    d: number;\n    prev: Node;\n    q: PairingHeap<Node>;\n}\n\nclass QueueEntry {\n    constructor(public node: Node, public prev: QueueEntry, public d: number) {}\n}\n\n/**\n * calculates all-pairs shortest paths or shortest paths from a single node\n * @class Calculator\n * @constructor\n * @param n {number} number of nodes\n * @param es {Edge[]} array of edges\n */\nexport class Calculator<Link> {\n    private neighbours: Node[];\n\n    constructor(public n: number, public es: Link[], getSourceIndex: (l: Link) => number, getTargetIndex: (l: Link) => number, getLength: (l: Link) => number) {\n        this.neighbours = new Array(this.n);\n        var i = this.n; while (i--) this.neighbours[i] = new Node(i);\n\n        i = this.es.length; while (i--) {\n            var e = this.es[i];\n            var u: number = getSourceIndex(e), v: number = getTargetIndex(e);\n            var d = getLength(e);\n            this.neighbours[u].neighbours.push(new Neighbour(v, d));\n            this.neighbours[v].neighbours.push(new Neighbour(u, d));\n        }\n    }\n\n    /**\n     * compute shortest paths for graph over n nodes with edges an array of source/target pairs\n     * edges may optionally have a length attribute.  1 is the default.\n     * Uses Johnson's algorithm.\n     *\n     * @method DistanceMatrix\n     * @return the distance matrix\n     */\n    DistanceMatrix(): number[][] {\n        var D = new Array(this.n);\n        for (var i = 0; i < this.n; ++i) {\n            D[i] = this.dijkstraNeighbours(i);\n        }\n        return D;\n    }\n\n    /**\n     * get shortest paths from a specified start node\n     * @method DistancesFromNode\n     * @param start node index\n     * @return array of path lengths\n     */\n    DistancesFromNode(start: number): number[] {\n        return this.dijkstraNeighbours(start);\n    }\n\n    PathFromNodeToNode(start: number, end: number): number[] {\n        return this.dijkstraNeighbours(start, end);\n    }\n\n    // find shortest path from start to end, with the opportunity at\n    // each edge traversal to compute a custom cost based on the\n    // previous edge.  For example, to penalise bends.\n    PathFromNodeToNodeWithPrevCost(\n        start: number,\n        end: number,\n        prevCost: (u:number,v:number,w:number)=>number): number[]\n    {\n        var q = new PriorityQueue<QueueEntry>((a, b) => a.d <= b.d),\n            u: Node = this.neighbours[start],\n            qu: QueueEntry = new QueueEntry(u,null,0),\n            visitedFrom = {};\n        q.push(qu);\n        while(!q.empty()) {\n            qu = q.pop();\n            u = qu.node;\n            if (u.id === end) {\n                break;\n            }\n            var i = u.neighbours.length; while (i--) {\n                var neighbour = u.neighbours[i],\n                    v = this.neighbours[neighbour.id];\n\n                // don't double back\n                if (qu.prev && v.id === qu.prev.node.id) continue;\n\n                // don't retraverse an edge if it has already been explored\n                // from a lower cost route\n                var viduid = v.id + ',' + u.id;\n                if(viduid in visitedFrom && visitedFrom[viduid] <= qu.d)\n                    continue;\n\n                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0,\n                    t = qu.d + neighbour.distance + cc;\n\n                // store cost of this traversal\n                visitedFrom[viduid] = t;\n                q.push(new QueueEntry(v, qu, t));\n            }\n        }\n        var path:number[] = [];\n        while (qu.prev) {\n            qu = qu.prev;\n            path.push(qu.node.id);\n        }\n        return path;\n    }\n\n    private dijkstraNeighbours(start: number, dest: number = -1): number[] {\n        var q = new PriorityQueue<Node>((a, b) => a.d <= b.d),\n            i = this.neighbours.length,\n            d: number[] = new Array(i);\n        while (i--) {\n            var node: Node = this.neighbours[i];\n            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\n            node.q = q.push(node);\n        }\n        while (!q.empty()) {\n            // console.log(q.toString(function (u) { return u.id + \"=\" + (u.d === Number.POSITIVE_INFINITY ? \"\\u221E\" : u.d.toFixed(2) )}));\n            var u = q.pop();\n            d[u.id] = u.d;\n            if (u.id === dest) {\n                var path: number[] = [];\n                var v = u;\n                while (typeof v.prev !== 'undefined') {\n                    path.push(v.prev.id);\n                    v = v.prev;\n                }\n                return path;\n            }\n            i = u.neighbours.length; while (i--) {\n                var neighbour = u.neighbours[i];\n                var v = this.neighbours[neighbour.id];\n                var t = u.d + neighbour.distance;\n                if (u.d !== Number.MAX_VALUE && v.d > t) {\n                    v.d = t;\n                    v.prev = u;\n                    q.reduceKey(v.q, v, (e,q)=>e.q = q);\n                }\n            }\n        }\n        return d;\n    }\n}\n","import {Rectangle} from './rectangle'\n    export class Point {\n        x: number;\n        y: number;\n    }\n\n    export class LineSegment {\n        constructor(public x1: number, public y1: number, public x2: number, public y2: number) { }\n    }\n\n    export class PolyPoint extends Point {\n        polyIndex: number;\n    }\n\n    /** tests if a point is Left|On|Right of an infinite line.\n     * @param points P0, P1, and P2\n     * @return >0 for P2 left of the line through P0 and P1\n     *            =0 for P2 on the line\n     *            <0 for P2 right of the line\n     */\n    export function isLeft(P0: Point, P1: Point, P2: Point): number {\n        return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);\n    }\n\n    function above(p: Point, vi: Point, vj: Point): boolean {\n        return isLeft(p, vi, vj) > 0;\n    }\n\n    function below(p: Point, vi: Point, vj: Point): boolean {\n        return isLeft(p, vi, vj) < 0;\n    }\n\n\n    /**\n     * returns the convex hull of a set of points using Andrew's monotone chain algorithm\n     * see: http://geomalgorithms.com/a10-_hull-1.html#Monotone%20Chain\n     * @param S array of points\n     * @return the convex hull as an array of points\n     */\n    export function ConvexHull(S: Point[]): Point[] {\n        var P = S.slice(0).sort((a, b) => a.x !== b.x ? b.x - a.x : b.y - a.y);\n        var n = S.length, i;\n        var minmin = 0;\n        var xmin = P[0].x;\n        for (i = 1; i < n; ++i) {\n            if (P[i].x !== xmin) break;\n        }\n        var minmax = i - 1;\n        var H: Point[] = [];\n        H.push(P[minmin]); // push minmin point onto stack\n        if (minmax === n - 1) { // degenerate case: all x-coords == xmin\n            if (P[minmax].y !== P[minmin].y) // a  nontrivial segment\n                H.push(P[minmax]);\n        } else {\n            // Get the indices of points with max x-coord and min|max y-coord\n            var maxmin, maxmax = n - 1;\n            var xmax = P[n - 1].x;\n            for (i = n - 2; i >= 0; i--)\n                if (P[i].x !== xmax) break;\n            maxmin = i + 1;\n\n            // Compute the lower hull on the stack H\n            i = minmax;\n            while (++i <= maxmin) {\n                // the lower line joins P[minmin]  with P[maxmin]\n                if (isLeft(P[minmin], P[maxmin], P[i]) >= 0 && i < maxmin)\n                    continue; // ignore P[i] above or on the lower line\n\n                while (H.length > 1) // there are at least 2 points on the stack\n                {\n                    // test if  P[i] is left of the line at the stack top\n                    if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                        break; // P[i] is a new hull  vertex\n                    else\n                        H.length -= 1; // pop top point off  stack\n                }\n                if (i != minmin) H.push(P[i]);\n            }\n\n            // Next, compute the upper hull on the stack H above the bottom hull\n            if (maxmax != maxmin) // if  distinct xmax points\n                H.push(P[maxmax]); // push maxmax point onto stack\n            var bot = H.length; // the bottom point of the upper hull stack\n            i = maxmin;\n            while (--i >= minmax) {\n                // the upper line joins P[maxmax]  with P[minmax]\n                if (isLeft(P[maxmax], P[minmax], P[i]) >= 0 && i > minmax)\n                    continue; // ignore P[i] below or on the upper line\n\n                while (H.length > bot) // at least 2 points on the upper stack\n                {\n                    // test if  P[i] is left of the line at the stack top\n                    if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                        break; // P[i] is a new hull  vertex\n                    else\n                        H.length -= 1; // pop top point off  stack\n                }\n                if (i != minmin) H.push(P[i]); // push P[i] onto stack\n            }\n        }\n        return H;\n    }\n\n    // apply f to the points in P in clockwise order around the point p\n    export function clockwiseRadialSweep(p: Point, P: Point[], f: (p: Point) => void) {\n        P.slice(0).sort(\n            (a, b) => Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x)\n            ).forEach(f);\n    }\n\n    function nextPolyPoint(p: PolyPoint, ps: PolyPoint[]): PolyPoint {\n        if (p.polyIndex === ps.length - 1) return ps[0];\n        return ps[p.polyIndex + 1];\n    }\n\n    function prevPolyPoint(p: PolyPoint, ps: PolyPoint[]): PolyPoint {\n        if (p.polyIndex === 0) return ps[ps.length - 1];\n        return ps[p.polyIndex - 1];\n    }\n\n    // tangent_PointPolyC(): fast binary search for tangents to a convex polygon\n    //    Input:  P = a 2D point (exterior to the polygon)\n    //            n = number of polygon vertices\n    //            V = array of vertices for a 2D convex polygon\n    //    Output: rtan = index of rightmost tangent point V[rtan]\n    //            ltan = index of leftmost tangent point V[ltan]\n    function tangent_PointPolyC(P: Point, V: Point[]): { rtan: number; ltan: number } {\n        // Rtangent_PointPolyC and Ltangent_PointPolyC require polygon to be\n        // \"closed\" with the first vertex duplicated at end, so V[n-1] = V[0].\n        let Vclosed = V.slice(0);  // Copy V\n        Vclosed.push(V[0]);        // Add V[0] at end\n\n        return { rtan: Rtangent_PointPolyC(P, Vclosed), ltan: Ltangent_PointPolyC(P, Vclosed) };\n    }\n\n\n    // Rtangent_PointPolyC(): binary search for convex polygon right tangent\n    //    Input:  P = a 2D point (exterior to the polygon)\n    //            n = number of polygon vertices\n    //            V = array of vertices for a 2D convex polygon with first\n    //                vertex duplicated as last, so V[n-1] = V[0]\n    //    Return: index \"i\" of rightmost tangent point V[i]\n    function Rtangent_PointPolyC(P: Point, V: Point[]): number {\n        var n = V.length - 1;\n\n        // use binary search for large convex polygons\n        var a: number, b: number, c: number;            // indices for edge chain endpoints\n        var upA: boolean, dnC: boolean;           // test for up direction of edges a and c\n\n        // rightmost tangent = maximum for the isLeft() ordering\n        // test if V[0] is a local maximum\n        if (below(P, V[1], V[0]) && !above(P, V[n - 1], V[0]))\n            return 0;               // V[0] is the maximum tangent point\n\n        for (a = 0, b = n; ;) {          // start chain = [0,n] with V[n]=V[0]\n            if (b - a === 1)\n                if (above(P, V[a], V[b]))\n                    return a;\n                else\n                    return b;\n\n            c = Math.floor((a + b) / 2);        // midpoint of [a,b], and 0<c<n\n            dnC = below(P, V[c + 1], V[c]);\n            if (dnC && !above(P, V[c - 1], V[c]))\n                return c;          // V[c] is the maximum tangent point\n\n            // no max yet, so continue with the binary search\n            // pick one of the two subchains [a,c] or [c,b]\n            upA = above(P, V[a + 1], V[a]);\n            if (upA) {                       // edge a points up\n                if (dnC)                         // edge c points down\n                    b = c;                           // select [a,c]\n                else {                           // edge c points up\n                    if (above(P, V[a], V[c]))     // V[a] above V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] below V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n            else {                           // edge a points down\n                if (!dnC)                        // edge c points up\n                    a = c;                           // select [c,b]\n                else {                           // edge c points down\n                    if (below(P, V[a], V[c]))     // V[a] below V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] above V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n        }\n    }\n\n    // Ltangent_PointPolyC(): binary search for convex polygon left tangent\n    //    Input:  P = a 2D point (exterior to the polygon)\n    //            n = number of polygon vertices\n    //            V = array of vertices for a 2D convex polygon with first\n    //                vertex duplicated as last, so V[n-1] = V[0]\n    //    Return: index \"i\" of leftmost tangent point V[i]\n    function Ltangent_PointPolyC(P: Point, V: Point[]): number {\n        var n = V.length - 1;\n        // use binary search for large convex polygons\n        var a: number, b: number, c: number;             // indices for edge chain endpoints\n        var dnA: boolean, dnC: boolean;           // test for down direction of edges a and c\n\n        // leftmost tangent = minimum for the isLeft() ordering\n        // test if V[0] is a local minimum\n        if (above(P, V[n - 1], V[0]) && !below(P, V[1], V[0]))\n            return 0;               // V[0] is the minimum tangent point\n\n        for (a = 0, b = n; ;) {          // start chain = [0,n] with V[n] = V[0]\n            if (b - a === 1)\n                if (below(P, V[a], V[b]))\n                    return a;\n                else\n                    return b;\n\n            c = Math.floor((a + b) / 2);        // midpoint of [a,b], and 0<c<n\n            dnC = below(P, V[c + 1], V[c]);\n            if (above(P, V[c - 1], V[c]) && !dnC)\n                return c;          // V[c] is the minimum tangent point\n\n            // no min yet, so continue with the binary search\n            // pick one of the two subchains [a,c] or [c,b]\n            dnA = below(P, V[a + 1], V[a]);\n            if (dnA) {                       // edge a points down\n                if (!dnC)                        // edge c points up\n                    b = c;                           // select [a,c]\n                else {                           // edge c points down\n                    if (below(P, V[a], V[c]))     // V[a] below V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] above V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n            else {                           // edge a points up\n                if (dnC)                         // edge c points down\n                    a = c;                           // select [c,b]\n                else {                           // edge c points up\n                    if (above(P, V[a], V[c]))     // V[a] above V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] below V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n        }\n    }\n\n    // RLtangent_PolyPolyC(): get the RL tangent between two convex polygons\n    //    Input:  m = number of vertices in polygon 1\n    //            V = array of vertices for convex polygon 1 with V[m]=V[0]\n    //            n = number of vertices in polygon 2\n    //            W = array of vertices for convex polygon 2 with W[n]=W[0]\n    //    Output: *t1 = index of tangent point V[t1] for polygon 1\n    //            *t2 = index of tangent point W[t2] for polygon 2\n    export function tangent_PolyPolyC(V: Point[], W: Point[], t1: (a: Point, b: Point[]) => number, t2: (a: Point, b: Point[]) => number, cmp1: (a: Point, b: Point, c: Point) => boolean, cmp2: (a: Point, b: Point, c: Point) => boolean): { t1: number; t2: number } {\n        var ix1: number, ix2: number;      // search indices for polygons 1 and 2\n\n        // first get the initial vertex on each polygon\n        ix1 = t1(W[0], V);   // right tangent from W[0] to V\n        ix2 = t2(V[ix1], W); // left tangent from V[ix1] to W\n\n        // ping-pong linear search until it stabilizes\n        var done = false;                    // flag when done\n        while (!done) {\n            done = true;                     // assume done until...\n            while (true) {\n                if (ix1 === V.length - 1) ix1 = 0;\n                if (cmp1(W[ix2], V[ix1], V[ix1 + 1])) break;\n                ++ix1;                       // get Rtangent from W[ix2] to V\n            }\n            while (true) {\n                if (ix2 === 0) ix2 = W.length - 1;\n                if (cmp2(V[ix1], W[ix2], W[ix2 - 1])) break;\n                --ix2;                       // get Ltangent from V[ix1] to W\n                done = false;                // not done if had to adjust this\n            }\n        }\n        return { t1: ix1, t2: ix2 };\n    }\n\n    export function LRtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        var rl = RLtangent_PolyPolyC(W, V);\n        return { t1: rl.t2, t2: rl.t1 };\n    }\n\n    export function RLtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);\n    }\n\n    export function LLtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);\n    }\n\n    export function RRtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);\n    }\n\n    export class BiTangent {\n        constructor(public t1: number, public t2: number) { }\n    }\n\n    export class BiTangents {\n        rl: BiTangent;\n        lr: BiTangent;\n        ll: BiTangent;\n        rr: BiTangent;\n    }\n\n    export class TVGPoint extends Point {\n        vv: VisibilityVertex;\n    }\n\n    export class VisibilityVertex {\n        constructor(\n            public id: number,\n            public polyid: number,\n            public polyvertid: number,\n            public p: TVGPoint)\n        {\n            p.vv = this;\n        }\n    }\n\n    export class VisibilityEdge {\n        constructor(\n            public source: VisibilityVertex,\n            public target: VisibilityVertex) { }\n        length(): number {\n            var dx = this.source.p.x - this.target.p.x;\n            var dy = this.source.p.y - this.target.p.y;\n            return Math.sqrt(dx * dx + dy * dy);\n        }\n    }\n\n    export class TangentVisibilityGraph {\n        V: VisibilityVertex[] = [];\n        E: VisibilityEdge[] = [];\n        constructor(public P: TVGPoint[][], g0?: { V: VisibilityVertex[]; E: VisibilityEdge[] }) {\n            if (!g0) {\n                var n = P.length;\n                // For each node...\n                for (var i = 0; i < n; i++) {\n                    var p = P[i];\n                    // For each node vertex.\n                    for (var j = 0; j < p.length; ++j) {\n                        var pj = p[j],\n                            vv = new VisibilityVertex(this.V.length, i, j, pj);\n                        this.V.push(vv);\n                        // For the every iteration but the first, generate an\n                        // edge from the previous visibility vertex to the\n                        // current one.\n                        if (j > 0) this.E.push(new VisibilityEdge(p[j - 1].vv, vv));\n                    }\n                    // Add a visibility edge from the first vertex to the last.\n                    if (p.length > 1) this.E.push(new VisibilityEdge(p[0].vv, p[p.length - 1].vv));\n                }\n                for (var i = 0; i < n - 1; i++) {\n                    var Pi = P[i];\n                    for (var j = i + 1; j < n; j++) {\n                        var Pj = P[j],\n                            t = tangents(Pi, Pj);\n                        for (var q in t) {\n                            var c = t[q],\n                                source = Pi[c.t1], target = Pj[c.t2];\n                            this.addEdgeIfVisible(source, target, i, j);\n                        }\n                    }\n                }\n            } else {\n                this.V = g0.V.slice(0);\n                this.E = g0.E.slice(0);\n            }\n        }\n        addEdgeIfVisible(u: TVGPoint, v: TVGPoint, i1: number, i2: number) {\n            if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {\n                this.E.push(new VisibilityEdge(u.vv, v.vv));\n            }\n        }\n        addPoint(p: TVGPoint, i1: number): VisibilityVertex {\n            var n = this.P.length;\n            this.V.push(new VisibilityVertex(this.V.length, n, 0, p));\n            for (var i = 0; i < n; ++i) {\n                if (i === i1) continue;\n                var poly = this.P[i],\n                    t = tangent_PointPolyC(p, poly);\n                this.addEdgeIfVisible(p, poly[t.ltan], i1, i);\n                this.addEdgeIfVisible(p, poly[t.rtan], i1, i);\n            }\n            return p.vv;\n        }\n        private intersectsPolys(l: LineSegment, i1: number, i2: number): boolean {\n            for (var i = 0, n = this.P.length; i < n; ++i) {\n                if (i != i1 && i != i2 && intersects(l, this.P[i]).length > 0) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    function intersects(l: LineSegment, P: Point[]) {\n        var ints = [];\n        for (var i = 1, n = P.length; i < n; ++i) {\n            var int = Rectangle.lineIntersection(\n                l.x1, l.y1,\n                l.x2, l.y2,\n                P[i - 1].x, P[i - 1].y,\n                P[i].x, P[i].y\n                );\n            if (int) ints.push(int);\n        }\n        return ints;\n    }\n\n    export function tangents(V: Point[], W: Point[]): BiTangents\n    {\n        var m = V.length - 1, n = W.length - 1;\n        var bt = new BiTangents();\n        for (var i = 0; i <= m; ++i) {\n            for (var j = 0; j <= n; ++j) {\n                var v1 = V[i == 0 ? m : i - 1];\n                var v2 = V[i];\n                var v3 = V[i == m ? 0 : i + 1];\n                var w1 = W[j == 0 ? n : j - 1];\n                var w2 = W[j];\n                var w3 = W[j == n ? 0 : j + 1];\n                var v1v2w2 = isLeft(v1, v2, w2);\n                var v2w1w2 = isLeft(v2, w1, w2);\n                var v2w2w3 = isLeft(v2, w2, w3);\n                var w1w2v2 = isLeft(w1, w2, v2);\n                var w2v1v2 = isLeft(w2, v1, v2);\n                var w2v2v3 = isLeft(w2, v2, v3);\n                if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0\n                    && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {\n                        bt.ll = new BiTangent(i, j);\n                } else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0\n                    && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {\n                        bt.rr = new BiTangent(i, j);\n                } else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0\n                    && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {\n                        bt.rl = new BiTangent(i, j);\n                } else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0\n                    && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {\n                        bt.lr = new BiTangent(i, j);\n                }\n            }\n        }\n        return bt;\n    }\n\n    function isPointInsidePoly(p: Point, poly: Point[]): boolean {\n        for (var i = 1, n = poly.length; i < n; ++i)\n            if (below(poly[i - 1], poly[i], p)) return false;\n        return true;\n    }\n\n    function isAnyPInQ(p: Point[], q: Point[]): boolean {\n        return !p.every(v => !isPointInsidePoly(v, q));\n    }\n\n    export function polysOverlap(p: Point[], q: Point[]): boolean {\n        if (isAnyPInQ(p, q)) return true;\n        if (isAnyPInQ(q, p)) return true;\n        for (var i = 1, n = p.length; i < n; ++i) {\n            var v = p[i], u = p[i - 1];\n            if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length > 0) return true;\n        }\n        return false;\n    }\n","    var packingOptions = {\n        PADDING: 10,\n        GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,\n        FLOAT_EPSILON: 0.0001,\n        MAX_INERATIONS: 100\n    };\n\n    // assign x, y to nodes while using box packing algorithm for disconnected graphs\n    export function applyPacking(graphs:Array<any>, w, h, node_size, desired_ratio = 1, centerGraph = true) {\n\n        var init_x = 0,\n            init_y = 0,\n\n            svg_width = w,\n            svg_height = h,\n\n            desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1,\n            node_size = typeof node_size !== 'undefined' ? node_size : 0,\n\n            real_width = 0,\n            real_height = 0,\n            min_width = 0,\n\n            global_bottom = 0,\n            line = [];\n\n        if (graphs.length == 0)\n            return;\n\n        /// that would take care of single nodes problem\n        // graphs.forEach(function (g) {\n        //     if (g.array.length == 1) {\n        //         g.array[0].x = 0;\n        //         g.array[0].y = 0;\n        //     }\n        // });\n\n        calculate_bb(graphs);\n        apply(graphs, desired_ratio);\n        if(centerGraph) {\n            put_nodes_to_right_positions(graphs);\n        }\n\n        // get bounding boxes for all separate graphs\n        function calculate_bb(graphs) {\n\n            graphs.forEach(function (g) {\n                calculate_single_bb(g)\n            });\n\n            function calculate_single_bb(graph) {\n                var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE,\n                    max_x = 0, max_y = 0;\n\n                graph.array.forEach(function (v) {\n                    var w = typeof v.width !== 'undefined' ? v.width : node_size;\n                    var h = typeof v.height !== 'undefined' ? v.height : node_size;\n                    w /= 2;\n                    h /= 2;\n                    max_x = Math.max(v.x + w, max_x);\n                    min_x = Math.min(v.x - w, min_x);\n                    max_y = Math.max(v.y + h, max_y);\n                    min_y = Math.min(v.y - h, min_y);\n                });\n\n                graph.width = max_x - min_x;\n                graph.height = max_y - min_y;\n            }\n        }\n\n        //function plot(data, left, right, opt_x, opt_y) {\n        //    // plot the cost function\n        //    var plot_svg = d3.select(\"body\").append(\"svg\")\n        //        .attr(\"width\", function () { return 2 * (right - left); })\n        //        .attr(\"height\", 200);\n\n\n        //    var x = d3.time.scale().range([0, 2 * (right - left)]);\n\n        //    var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n        //    plot_svg.append(\"g\").attr(\"class\", \"x axis\")\n        //        .attr(\"transform\", \"translate(0, 199)\")\n        //        .call(xAxis);\n\n        //    var lastX = 0;\n        //    var lastY = 0;\n        //    var value = 0;\n        //    for (var r = left; r < right; r += 1) {\n        //        value = step(data, r);\n        //        // value = 1;\n\n        //        plot_svg.append(\"line\").attr(\"x1\", 2 * (lastX - left))\n        //            .attr(\"y1\", 200 - 30 * lastY)\n        //            .attr(\"x2\", 2 * r - 2 * left)\n        //            .attr(\"y2\", 200 - 30 * value)\n        //            .style(\"stroke\", \"rgb(6,120,155)\");\n\n        //        lastX = r;\n        //        lastY = value;\n        //    }\n\n        //    plot_svg.append(\"circle\").attr(\"cx\", 2 * opt_x - 2 * left).attr(\"cy\", 200 - 30 * opt_y)\n        //        .attr(\"r\", 5).style('fill', \"rgba(0,0,0,0.5)\");\n\n        //}\n\n        // actual assigning of position to nodes\n        function put_nodes_to_right_positions(graphs) {\n            graphs.forEach(function (g) {\n                // calculate current graph center:\n                var center = { x: 0, y: 0 };\n\n                g.array.forEach(function (node) {\n                    center.x += node.x;\n                    center.y += node.y;\n                });\n\n                center.x /= g.array.length;\n                center.y /= g.array.length;\n\n                // calculate current top left corner:\n                var corner = { x: center.x - g.width / 2, y: center.y - g.height / 2 };\n                var offset = { x: g.x - corner.x + svg_width / 2 - real_width / 2, y: g.y - corner.y + svg_height / 2 - real_height / 2};\n\n                // put nodes:\n                g.array.forEach(function (node) {\n                    node.x += offset.x;\n                    node.y += offset.y;\n                });\n            });\n        }\n\n        // starts box packing algorithm\n        // desired ratio is 1 by default\n        function apply(data, desired_ratio) {\n            var curr_best_f = Number.POSITIVE_INFINITY;\n            var curr_best = 0;\n            data.sort(function (a, b) { return b.height - a.height; });\n\n            min_width = data.reduce(function (a, b) {\n                return a.width < b.width ? a.width : b.width;\n            });\n\n            var left = x1 = min_width;\n            var right = x2 = get_entire_width(data);\n            var iterationCounter = 0;\n\n            var f_x1 = Number.MAX_VALUE;\n            var f_x2 = Number.MAX_VALUE;\n            var flag = -1; // determines which among f_x1 and f_x2 to recompute\n\n\n            var dx = Number.MAX_VALUE;\n            var df = Number.MAX_VALUE;\n\n            while ((dx > min_width) || df > packingOptions.FLOAT_EPSILON) {\n\n                if (flag != 1) {\n                    var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;\n                    var f_x1 = step(data, x1);\n                }\n                if (flag != 0) {\n                    var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;\n                    var f_x2 = step(data, x2);\n                }\n\n                dx = Math.abs(x1 - x2);\n                df = Math.abs(f_x1 - f_x2);\n\n                if (f_x1 < curr_best_f) {\n                    curr_best_f = f_x1;\n                    curr_best = x1;\n                }\n\n                if (f_x2 < curr_best_f) {\n                    curr_best_f = f_x2;\n                    curr_best = x2;\n                }\n\n                if (f_x1 > f_x2) {\n                    left = x1;\n                    x1 = x2;\n                    f_x1 = f_x2;\n                    flag = 1;\n                } else {\n                    right = x2;\n                    x2 = x1;\n                    f_x2 = f_x1;\n                    flag = 0;\n                }\n\n                if (iterationCounter++ > 100) {\n                    break;\n                }\n            }\n            // plot(data, min_width, get_entire_width(data), curr_best, curr_best_f);\n            step(data, curr_best);\n        }\n\n        // one iteration of the optimization method\n        // (gives a proper, but not necessarily optimal packing)\n        function step(data, max_width) {\n            line = [];\n            real_width = 0;\n            real_height = 0;\n            global_bottom = init_y;\n\n            for (var i = 0; i < data.length; i++) {\n                var o = data[i];\n                put_rect(o, max_width);\n            }\n\n            return Math.abs(get_real_ratio() - desired_ratio);\n        }\n\n        // looking for a position to one box\n        function put_rect(rect, max_width) {\n\n\n            var parent = undefined;\n\n            for (var i = 0; i < line.length; i++) {\n                if ((line[i].space_left >= rect.height) && (line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width) <= packingOptions.FLOAT_EPSILON) {\n                    parent = line[i];\n                    break;\n                }\n            }\n\n            line.push(rect);\n\n            if (parent !== undefined) {\n                rect.x = parent.x + parent.width + packingOptions.PADDING;\n                rect.y = parent.bottom;\n                rect.space_left = rect.height;\n                rect.bottom = rect.y;\n                parent.space_left -= rect.height + packingOptions.PADDING;\n                parent.bottom += rect.height + packingOptions.PADDING;\n            } else {\n                rect.y = global_bottom;\n                global_bottom += rect.height + packingOptions.PADDING;\n                rect.x = init_x;\n                rect.bottom = rect.y;\n                rect.space_left = rect.height;\n            }\n\n            if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON) real_height = rect.y + rect.height - init_y;\n            if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON) real_width = rect.x + rect.width - init_x;\n        };\n\n        function get_entire_width(data) {\n            var width = 0;\n            data.forEach(function (d) { return width += d.width + packingOptions.PADDING; });\n            return width;\n        }\n\n        function get_real_ratio() {\n            return (real_width / real_height);\n        }\n    }\n\n    /**\n     * connected components of graph\n     * returns an array of {}\n     */\n    export function separateGraphs(nodes, links) {\n        var marks = {};\n        var ways = {};\n        var graphs = [];\n        var clusters = 0;\n\n        for (var i = 0; i < links.length; i++) {\n            var link = links[i];\n            var n1 = link.source;\n            var n2 = link.target;\n            if (ways[n1.index])\n                ways[n1.index].push(n2);\n            else\n                ways[n1.index] = [n2];\n\n            if (ways[n2.index])\n                ways[n2.index].push(n1);\n            else\n                ways[n2.index] = [n1];\n        }\n\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            if (marks[node.index]) continue;\n            explore_node(node, true);\n        }\n\n        function explore_node(n, is_new) {\n            if (marks[n.index] !== undefined) return;\n            if (is_new) {\n                clusters++;\n                graphs.push({ array: [] });\n            }\n            marks[n.index] = clusters;\n            graphs[clusters - 1].array.push(n);\n            var adjacent = ways[n.index];\n            if (!adjacent) return;\n\n            for (var j = 0; j < adjacent.length; j++) {\n                explore_node(adjacent[j], false);\n            }\n        }\n\n        return graphs;\n    }\n","let wasm; export async function setWasm(wasmModule) { const inst = await WebAssembly.instantiate(wasmModule, { \"./derivative_computer_bg.js\": { __wbindgen_memory } }); wasm = inst.exports; } export function getWasm() { return wasm; }\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n* @param {number} ctx_ptr\n*/\nexport function release_ctx_2d(ctx_ptr) {\n    wasm.release_ctx_2d(ctx_ptr);\n}\n\nlet cachedFloat32Memory0 = null;\n\nfunction getFloat32Memory0() {\n    if (cachedFloat32Memory0 === null || cachedFloat32Memory0.byteLength === 0) {\n        cachedFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachedFloat32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {number} node_count\n* @param {Float32Array} D\n* @param {Float32Array} G\n* @returns {number}\n*/\nexport function create_derivative_computer_ctx_2d(node_count, D, G) {\n    const ptr0 = passArrayF32ToWasm0(D, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArrayF32ToWasm0(G, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.create_derivative_computer_ctx_2d(node_count, ptr0, len0, ptr1, len1);\n    return ret;\n}\n\n/**\n* @param {number} node_count\n* @param {Float32Array} D\n* @param {Float32Array} G\n* @returns {number}\n*/\nexport function create_derivative_computer_ctx_3d(node_count, D, G) {\n    const ptr0 = passArrayF32ToWasm0(D, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArrayF32ToWasm0(G, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.create_derivative_computer_ctx_3d(node_count, ptr0, len0, ptr1, len1);\n    return ret;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayF32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getFloat32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {number} ctx_ptr\n* @param {Float32Array} x\n* @returns {Float32Array}\n*/\nexport function compute_2d(ctx_ptr, x) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayF32ToWasm0(x, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.compute_2d(retptr, ctx_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayF32FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} ctx_ptr\n* @param {Float32Array} x\n* @returns {Float32Array}\n*/\nexport function compute_3d(ctx_ptr, x) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayF32ToWasm0(x, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.compute_3d(retptr, ctx_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayF32FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} ctx_ptr\n* @param {number} u\n* @param {number} p_0\n* @param {number} p_1\n* @param {number} x_0_u\n* @param {number} x_1_u\n*/\nexport function apply_lock_2d(ctx_ptr, u, p_0, p_1, x_0_u, x_1_u) {\n    wasm.apply_lock_2d(ctx_ptr, u, p_0, p_1, x_0_u, x_1_u);\n}\n\n/**\n* @param {number} ctx_ptr\n* @param {number} u\n* @param {number} p_0\n* @param {number} p_1\n* @param {number} p_2\n* @param {number} x_0_u\n* @param {number} x_1_u\n* @param {number} x_2_u\n*/\nexport function apply_lock_3d(ctx_ptr, u, p_0, p_1, p_2, x_0_u, x_1_u, x_2_u) {\n    wasm.apply_lock_3d(ctx_ptr, u, p_0, p_1, p_2, x_0_u, x_1_u, x_2_u);\n}\n\n/**\n* @param {number} ctx_ptr\n* @returns {number}\n*/\nexport function compute_step_size_2d(ctx_ptr) {\n    const ret = wasm.compute_step_size_2d(ctx_ptr);\n    return ret;\n}\n\n/**\n* @param {number} ctx_ptr\n* @returns {number}\n*/\nexport function compute_step_size_3d(ctx_ptr) {\n    const ret = wasm.compute_step_size_3d(ctx_ptr);\n    return ret;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @returns {any}\n*/\nexport function get_memory() {\n    const ret = wasm.get_memory();\n    return takeObject(ret);\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_D_2d(ctx) {\n    const ret = wasm.get_D_2d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_D_3d(ctx) {\n    const ret = wasm.get_D_3d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_g_2d(ctx) {\n    const ret = wasm.get_g_2d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_g_3d(ctx) {\n    const ret = wasm.get_D_2d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @param {Float32Array} new_G\n*/\nexport function set_G_2d(ctx, new_G) {\n    const ptr0 = passArrayF32ToWasm0(new_G, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.set_G_2d(ctx, ptr0, len0);\n}\n\n/**\n* @param {number} ctx\n* @param {Float32Array} new_G\n*/\nexport function set_G_3d(ctx, new_G) {\n    const ptr0 = passArrayF32ToWasm0(new_G, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.set_G_3d(ctx, ptr0, len0);\n}\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n","let wasm; export async function setWasm(wasmModule) { const inst = await WebAssembly.instantiate(wasmModule, { \"./derivative_computer_bg.js\": { __wbindgen_memory } }); wasm = inst.exports; } export function getWasm() { return wasm; }\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n* @param {number} ctx_ptr\n*/\nexport function release_ctx_2d(ctx_ptr) {\n    wasm.release_ctx_2d(ctx_ptr);\n}\n\nlet cachedFloat32Memory0 = null;\n\nfunction getFloat32Memory0() {\n    if (cachedFloat32Memory0 === null || cachedFloat32Memory0.byteLength === 0) {\n        cachedFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachedFloat32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {number} node_count\n* @param {Float32Array} D\n* @param {Float32Array} G\n* @returns {number}\n*/\nexport function create_derivative_computer_ctx_2d(node_count, D, G) {\n    const ptr0 = passArrayF32ToWasm0(D, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArrayF32ToWasm0(G, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.create_derivative_computer_ctx_2d(node_count, ptr0, len0, ptr1, len1);\n    return ret;\n}\n\n/**\n* @param {number} node_count\n* @param {Float32Array} D\n* @param {Float32Array} G\n* @returns {number}\n*/\nexport function create_derivative_computer_ctx_3d(node_count, D, G) {\n    const ptr0 = passArrayF32ToWasm0(D, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArrayF32ToWasm0(G, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.create_derivative_computer_ctx_3d(node_count, ptr0, len0, ptr1, len1);\n    return ret;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayF32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getFloat32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {number} ctx_ptr\n* @param {Float32Array} x\n* @returns {Float32Array}\n*/\nexport function compute_2d(ctx_ptr, x) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayF32ToWasm0(x, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.compute_2d(retptr, ctx_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayF32FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} ctx_ptr\n* @param {Float32Array} x\n* @returns {Float32Array}\n*/\nexport function compute_3d(ctx_ptr, x) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayF32ToWasm0(x, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.compute_3d(retptr, ctx_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayF32FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {number} ctx_ptr\n* @param {number} u\n* @param {number} p_0\n* @param {number} p_1\n* @param {number} x_0_u\n* @param {number} x_1_u\n*/\nexport function apply_lock_2d(ctx_ptr, u, p_0, p_1, x_0_u, x_1_u) {\n    wasm.apply_lock_2d(ctx_ptr, u, p_0, p_1, x_0_u, x_1_u);\n}\n\n/**\n* @param {number} ctx_ptr\n* @param {number} u\n* @param {number} p_0\n* @param {number} p_1\n* @param {number} p_2\n* @param {number} x_0_u\n* @param {number} x_1_u\n* @param {number} x_2_u\n*/\nexport function apply_lock_3d(ctx_ptr, u, p_0, p_1, p_2, x_0_u, x_1_u, x_2_u) {\n    wasm.apply_lock_3d(ctx_ptr, u, p_0, p_1, p_2, x_0_u, x_1_u, x_2_u);\n}\n\n/**\n* @param {number} ctx_ptr\n* @returns {number}\n*/\nexport function compute_step_size_2d(ctx_ptr) {\n    const ret = wasm.compute_step_size_2d(ctx_ptr);\n    return ret;\n}\n\n/**\n* @param {number} ctx_ptr\n* @returns {number}\n*/\nexport function compute_step_size_3d(ctx_ptr) {\n    const ret = wasm.compute_step_size_3d(ctx_ptr);\n    return ret;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @returns {any}\n*/\nexport function get_memory() {\n    const ret = wasm.get_memory();\n    return takeObject(ret);\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_D_2d(ctx) {\n    const ret = wasm.get_D_2d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_D_3d(ctx) {\n    const ret = wasm.get_D_3d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_g_2d(ctx) {\n    const ret = wasm.get_g_2d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @returns {number}\n*/\nexport function get_g_3d(ctx) {\n    const ret = wasm.get_D_2d(ctx);\n    return ret;\n}\n\n/**\n* @param {number} ctx\n* @param {Float32Array} new_G\n*/\nexport function set_G_2d(ctx, new_G) {\n    const ptr0 = passArrayF32ToWasm0(new_G, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.set_G_2d(ctx, ptr0, len0);\n}\n\n/**\n* @param {number} ctx\n* @param {Float32Array} new_G\n*/\nexport function set_G_3d(ctx, new_G) {\n    const ptr0 = passArrayF32ToWasm0(new_G, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.set_G_3d(ctx, ptr0, len0);\n}\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n","/**\n * Loads the WebAssembly module that performs the derivative computations for `descent.ts`\n */\n\nimport * as wasmSIMD from './wasm/build/simd/derivative_computer';\nimport wasmSIMD_bg from './wasm/build/simd/derivative_computer_bg.wasm';\nimport * as wasmNoSIMD from './wasm/build/no_simd/derivative_computer';\nimport wasmNoSIMD_bg from './wasm/build/no_simd/derivative_computer_bg.wasm';\n\n// prettier-ignore\nconst getHasSIMDSupport = async () => WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]))\n\nclass AsyncOnce<T> {\n  private getter: () => Promise<T>;\n  private pending: Promise<T> | null = null;\n  private res: null | { value: T };\n\n  public constructor(getter: () => Promise<T>) {\n    this.getter = getter;\n  }\n\n  public async get(): Promise<T> {\n    if (this.res) {\n      return this.res.value;\n    }\n    if (this.pending) {\n      return this.pending;\n    }\n\n    this.pending = new Promise((resolve) =>\n      this.getter().then((res) => {\n        this.res = { value: res };\n        this.pending = null;\n        resolve(res);\n      })\n    );\n    return this.pending!;\n  }\n}\n\nexport const WasmInst = new AsyncOnce(async () => {\n  const hasWasmSIMDSupport = await getHasSIMDSupport();\n  if (!window.location.href.includes('localhost')) {\n    console.log(\n      hasWasmSIMDSupport\n        ? 'Wasm SIMD support detected!'\n        : 'Wasm SIMD support NOT detected; using non-SIMD Wasm'\n    );\n  }\n\n  if (hasWasmSIMDSupport) {\n    const wasmModule = await (wasmSIMD_bg as any)();\n    (wasmSIMD as any).setWasm(wasmModule);\n    return wasmSIMD;\n  } else {\n    const wasmModule = await (wasmNoSIMD_bg as any)();\n    (wasmNoSIMD as any).setWasm(wasmModule);\n    return wasmNoSIMD;\n  }\n});\n\ntype PromiseResolveType<P> = P extends Promise<infer T> ? T : never;\n\nexport type DerivativeComputerWasmInst = PromiseResolveType<ReturnType<typeof WasmInst.get>>;\n\nexport const getDerivativeComputerWasm = (): Promise<DerivativeComputerWasmInst> => WasmInst.get();\n","import * as powergraph from './powergraph'\nimport {LinkLengthAccessor, symmetricDiffLinkLengths, jaccardLinkLengths, generateDirectedEdgeConstraints} from './linklengths'\nimport {Descent} from './descent'\nimport {Rectangle, Projection, makeEdgeTo, makeEdgeBetween} from './rectangle'\nimport {Calculator} from './shortestpaths'\nimport {TangentVisibilityGraph, TVGPoint} from './geom'\nimport {separateGraphs, applyPacking} from './handledisconnected'\nimport { getDerivativeComputerWasm } from './wasmEngine'\n\n// Kick this off right away since we're going to need it eventually\nconst wasmInstPromise = getDerivativeComputerWasm();\n\n    /**\n     * The layout process fires three events:\n     *  - start: layout iterations started\n     *  - tick: fired once per iteration, listen to this to animate\n     *  - end: layout converged, you might like to zoom-to-fit or something at notification of this event\n     */\n    export enum EventType { start, tick, end };\n    export interface Event {\n        type: EventType;\n        alpha: number;\n        stress?: number;\n        listener?: () => void;\n    }\n    export interface InputNode {\n        /**\n         * index in nodes array, this is initialized by Layout.start()\n         */\n        index?: number;\n        /**\n         * x and y will be computed by layout as the Node's centroid\n         */\n        x?: number;\n        /**\n         * x and y will be computed by layout as the Node's centroid\n         */\n        y?: number;\n        /**\n         * specify a width and height of the node's bounding box if you turn on avoidOverlaps\n         */\n        width?: number;\n        /**\n         * specify a width and height of the node's bounding box if you turn on avoidOverlaps\n         */\n        height?: number;\n        /**\n         * selective bit mask.  !=0 means layout will not move.\n         */\n        fixed?: number;\n    }\n    export interface Node extends InputNode {\n      // Client-passed node may be missing these properties, which will be set\n      // upon ingestion\n      x: number;\n      y: number;\n    }\n\n    export interface Group {\n        bounds?: Rectangle;\n        leaves?: Node[];\n        groups?: Group[];\n        padding?: number;\n    }\n\n    function isGroup(g: any): g is Group {\n        return typeof g.leaves !== 'undefined' || typeof g.groups !== 'undefined';\n    }\n\n    export interface Link<NodeRefType> {\n        source: NodeRefType;\n        target: NodeRefType;\n\n        // ideal length the layout should try to achieve for this link\n        length?: number;\n\n        // how hard we should try to satisfy this link's ideal length\n        // must be in the range: 0 < weight <= 1\n        // if unspecified 1 is the default\n        weight?: number;\n    }\n\n    export type LinkNumericPropertyAccessor = (t: Link<Node | number>) => number;\n\n    export interface LinkLengthTypeAccessor extends LinkLengthAccessor<Link<Node | number>> {\n        getType: LinkNumericPropertyAccessor;\n    }\n    /**\n     * Main interface to cola layout.\n     * @class Layout\n     */\n    export class Layout {\n        private _canvasSize = [1, 1];\n        private _linkDistance: number | LinkNumericPropertyAccessor = 20;\n        private _defaultNodeSize: number = 10;\n        private _linkLengthCalculator = null;\n        private _linkType = null;\n        private _avoidOverlaps = false;\n        private _handleDisconnected = true;\n        private _alpha;\n        private _lastStress;\n        private _running = false;\n        private _nodes = [];\n        private _groups = [];\n        private _rootGroup = null;\n        private _links: Link<Node | number>[] = [];\n        private _constraints = [];\n        private _distanceMatrix = null;\n        private _descent: Descent = null;\n        private _directedLinkConstraints = null;\n        private _threshold = 0.01;\n        private _visibilityGraph = null;\n        private _groupCompactness = 1e-6;\n\n        // sub-class and override this property to replace with a more sophisticated eventing mechanism\n        protected event = null;\n\n        // subscribe a listener to an event\n        // sub-class and override this method to replace with a more sophisticated eventing mechanism\n        public on(e: EventType | string, listener: (event?: Event) => void): this {\n            // override me!\n            if (!this.event) this.event = {};\n            if (typeof e === 'string') {\n                this.event[EventType[e]] = listener;\n            } else {\n                this.event[e] = listener;\n            }\n            return this;\n        }\n\n        // a function that is notified of events like \"tick\"\n        // sub-classes can override this method to replace with a more sophisticated eventing mechanism\n        protected trigger(e: Event) {\n            if (this.event && typeof this.event[e.type] !== 'undefined') {\n                this.event[e.type](e);\n            }\n        }\n\n        // a function that kicks off the iteration tick loop\n        // it calls tick() repeatedly until tick returns true (is converged)\n        // subclass and override it with something fancier (e.g. dispatch tick on a timer)\n        protected kick(): void {\n            while (!this.tick());\n        }\n\n        /**\n         * iterate the layout.  Returns true when layout converged.\n         */\n        protected tick(): boolean {\n            if (this._alpha < this._threshold) {\n                this._running = false;\n                this.trigger({ type: EventType.end, alpha: this._alpha = 0, stress: this._lastStress });\n                return true;\n            }\n            const n = this._nodes.length,\n                  m = this._links.length;\n            let o, i;\n\n            this._descent.locks.clear();\n            for (i = 0; i < n; ++i) {\n                o = this._nodes[i];\n                if (o.fixed) {\n                    if (typeof o.px === 'undefined' || typeof o.py === 'undefined') {\n                        o.px = o.x;\n                        o.py = o.y;\n                    }\n                    var p = [o.px, o.py];\n                    this._descent.locks.add(i, p);\n                }\n            }\n\n            let s1 = this._descent.rungeKutta();\n            //var s1 = descent.reduceStress();\n            if (s1 === 0) {\n                this._alpha = 0;\n            } else if (typeof this._lastStress !== 'undefined') {\n                this._alpha = s1; //Math.abs(Math.abs(this._lastStress / s1) - 1);\n            }\n            this._lastStress = s1;\n\n            this.updateNodePositions();\n\n            this.trigger({ type: EventType.tick, alpha: this._alpha, stress: this._lastStress });\n            return false;\n        }\n\n        // copy positions out of descent instance into each of the nodes' center coords\n        private updateNodePositions(): void {\n            const x = this._descent.x[0], y = this._descent.x[1];\n            let o, i = this._nodes.length;\n            while (i--) {\n                o = this._nodes[i];\n                o.x = x[i];\n                o.y = y[i];\n            }\n        }\n\n        /**\n         * the list of nodes.\n         * If nodes has not been set, but links has, then we instantiate a nodes list here, of the correct size,\n         * before returning it.\n         * @property nodes {Array}\n         * @default empty list\n         */\n        nodes(): Array<Node>\n        nodes(v: Array<InputNode>): this\n        nodes(v?: any): any {\n            if (!v) {\n                if (this._nodes.length === 0 && this._links.length > 0) {\n                    // if we have links but no nodes, create the nodes array now with empty objects for the links to point at.\n                    // in this case the links are expected to be numeric indices for nodes in the range 0..n-1 where n is the number of nodes\n                    var n = 0;\n                    this._links.forEach(function (l) {\n                        n = Math.max(n, <number>l.source, <number>l.target);\n                    });\n                    this._nodes = new Array(++n);\n                    for (var i = 0; i < n; ++i) {\n                        this._nodes[i] = {};\n                    }\n                }\n                return this._nodes;\n            }\n            this._nodes = v;\n            return this;\n        }\n\n        /**\n         * a list of hierarchical groups defined over nodes\n         * @property groups {Array}\n         * @default empty list\n         */\n        groups(): Array<Group>\n        groups(x: Array<Group>): this\n        groups(x?: Array<Group>): any {\n            if (!x) return this._groups;\n            this._groups = x;\n            this._rootGroup = {};\n            this._groups.forEach(g => {\n                if (typeof g.padding === \"undefined\")\n                    g.padding = 1;\n                if (typeof g.leaves !== \"undefined\") {\n                    g.leaves.forEach((v, i) => {\n                        if (typeof v === 'number')\n                            (g.leaves[i] = this._nodes[v]).parent = g\n                    });\n                }\n                if (typeof g.groups !== \"undefined\") {\n                    g.groups.forEach((gi, i) => {\n                        if (typeof gi === 'number')\n                            (g.groups[i] = this._groups[gi]).parent = g\n                    });\n                }\n            });\n            this._rootGroup.leaves = this._nodes.filter(v => typeof v.parent === 'undefined');\n            this._rootGroup.groups = this._groups.filter(g => typeof g.parent === 'undefined');\n            return this;\n        }\n\n        powerGraphGroups(f: Function): this {\n            var g = powergraph.getGroups(this._nodes, this._links, this.linkAccessor, this._rootGroup);\n            this.groups(g.groups);\n            f(g);\n            return this;\n        }\n\n        /**\n         * if true, the layout will not permit overlaps of the node bounding boxes (defined by the width and height properties on nodes)\n         * @property avoidOverlaps\n         * @type bool\n         * @default false\n         */\n        avoidOverlaps(): boolean\n        avoidOverlaps(v: boolean): this\n        avoidOverlaps(v?: boolean): any {\n            if (!arguments.length) return this._avoidOverlaps;\n            this._avoidOverlaps = v;\n            return this;\n        }\n\n        /**\n         * if true, the final step of the start method will be to nicely pack connected components of the graph.\n         * works best if start() is called with a reasonable number of iterations specified and\n         * each node has a bounding box (defined by the width and height properties on nodes).\n         * @property handleDisconnected\n         * @type bool\n         * @default true\n         */\n        handleDisconnected(): boolean\n        handleDisconnected(v: boolean): this\n        handleDisconnected(v?: boolean): any {\n            if (!arguments.length) return this._handleDisconnected;\n            this._handleDisconnected = v;\n            return this;\n        }\n\n        /**\n         * causes constraints to be generated such that directed graphs are laid out either from left-to-right or top-to-bottom.\n         * a separation constraint is generated in the selected axis for each edge that is not involved in a cycle (part of a strongly connected component)\n         * @param axis {string} 'x' for left-to-right, 'y' for top-to-bottom\n         * @param minSeparation {number|link=>number} either a number specifying a minimum spacing required across all links or a function to return the minimum spacing for each link\n         */\n        flowLayout(axis: string, minSeparation: number|((t: any)=>number)): this {\n            if (!arguments.length) axis = 'y';\n            this._directedLinkConstraints = {\n                axis: axis,\n                getMinSeparation: typeof minSeparation === 'number' ? function () { return minSeparation } : minSeparation\n            };\n            return this;\n        }\n\n        /**\n         * links defined as source, target pairs over nodes\n         * @property links {array}\n         * @default empty list\n         */\n        links(): Array<Link<Node|number>>\n        links(x: Array<Link<Node|number>>): this\n        links(x?: Array<Link<Node|number>>): any {\n            if (!arguments.length) return this._links;\n            this._links = x;\n            return this;\n        }\n\n        /**\n         * list of constraints of various types\n         * @property constraints\n         * @type {array}\n         * @default empty list\n         */\n        constraints(): Array<any>\n        constraints(c: Array<any>): this\n        constraints(c?: Array<any>): any {\n            if (!arguments.length) return this._constraints;\n            this._constraints = c;\n            return this;\n        }\n\n        /**\n         * Matrix of ideal distances between all pairs of nodes.\n         * If unspecified, the ideal distances for pairs of nodes will be based on the shortest path distance between them.\n         * @property distanceMatrix\n         * @type {Array of Array of Number}\n         * @default null\n         */\n        distanceMatrix(): Array<Array<number>>\n        distanceMatrix(d: Array<Array<number>>): this\n        distanceMatrix(d?: any): any {\n            if (!arguments.length) return this._distanceMatrix;\n            this._distanceMatrix = d;\n            return this;\n        }\n\n        /**\n         * Size of the layout canvas dimensions [x,y]. Currently only used to determine the midpoint which is taken as the starting position\n         * for nodes with no preassigned x and y.\n         * @property size\n         * @type {Array of Number}\n         */\n        size(): Array<number>\n        size(x: Array<number>): this\n        size(x?: Array<number>): any {\n            if (!x) return this._canvasSize;\n            this._canvasSize = x;\n            return this;\n        }\n\n        /**\n         * Default size (assume nodes are square so both width and height) to use in packing if node width/height are not specified.\n         * @property defaultNodeSize\n         * @type {Number}\n         */\n        defaultNodeSize(): number\n        defaultNodeSize(x: number): this\n        defaultNodeSize(x?: any): any {\n            if (!x) return this._defaultNodeSize;\n            this._defaultNodeSize = x;\n            return this;\n        }\n\n        /**\n         * The strength of attraction between the group boundaries to each other.\n         * @property defaultNodeSize\n         * @type {Number}\n         */\n        groupCompactness(): number\n        groupCompactness(x: number): this\n        groupCompactness(x?: any): any {\n            if (!x) return this._groupCompactness;\n            this._groupCompactness = x;\n            return this;\n        }\n\n        /**\n         * links have an ideal distance, The automatic layout will compute layout that tries to keep links (AKA edges) as close as possible to this length.\n         */\n        linkDistance(): number\n        linkDistance(): LinkNumericPropertyAccessor\n        linkDistance(x: number): this\n        linkDistance(x: LinkNumericPropertyAccessor): this\n        linkDistance(x?: any): any {\n            if (!x) {\n                return this._linkDistance;\n            }\n            this._linkDistance = typeof x === \"function\" ? x : +x;\n            this._linkLengthCalculator = null;\n            return this;\n        }\n\n        linkType(f: Function | number): this {\n            this._linkType = f;\n            return this;\n        }\n\n        convergenceThreshold(): number\n        convergenceThreshold(x: number): this\n        convergenceThreshold(x?: number): any {\n            if (!x) return this._threshold;\n            this._threshold = typeof x === \"function\" ? x : +x;\n            return this;\n        }\n\n        alpha(): number\n        alpha(x: number): this\n        alpha(x?: number): any {\n            if (!arguments.length) return this._alpha;\n            else {\n                x = +x;\n                if (this._alpha) { // if we're already running\n                    if (x > 0) this._alpha = x; // we might keep it hot\n                    else this._alpha = 0; // or, next tick will dispatch \"end\"\n                } else if (x > 0) { // otherwise, fire it up!\n                    if (!this._running) {\n                        this._running = true;\n                        this.trigger({ type: EventType.start, alpha: this._alpha = x});\n                        this.kick();\n                    }\n                }\n                return this;\n            }\n        }\n\n        getLinkLength(link: Link<Node | number>): number {\n            return typeof this._linkDistance === \"function\" ? +((<LinkNumericPropertyAccessor>this._linkDistance)(link)) : <number>this._linkDistance;\n        }\n\n        static setLinkLength(link: Link<Node|number>, length: number) {\n            link.length = length;\n        }\n\n        getLinkType(link: Link<Node | number>): number {\n            return typeof this._linkType === \"function\" ? this._linkType(link) : 0;\n        }\n\n        linkAccessor: LinkLengthTypeAccessor = {\n            getSourceIndex: Layout.getSourceIndex,\n            getTargetIndex: Layout.getTargetIndex,\n            setLength: Layout.setLinkLength,\n            getType: l => typeof this._linkType === \"function\" ? this._linkType(l) : 0\n        };\n\n        /**\n         * compute an ideal length for each link based on the graph structure around that link.\n         * you can use this (for example) to create extra space around hub-nodes in dense graphs.\n         * In particular this calculation is based on the \"symmetric difference\" in the neighbour sets of the source and target:\n         * i.e. if neighbours of source is a and neighbours of target are b then calculation is: sqrt(|a union b| - |a intersection b|)\n         * Actual computation based on inspection of link structure occurs in start(), so links themselves\n         * don't have to have been assigned before invoking this function.\n         * @param {number} [idealLength] the base length for an edge when its source and start have no other common neighbours (e.g. 40)\n         * @param {number} [w] a multiplier for the effect of the length adjustment (e.g. 0.7)\n         */\n        symmetricDiffLinkLengths(idealLength: number, w: number = 1): this {\n            this.linkDistance(l => idealLength * l.length);\n            this._linkLengthCalculator = () => symmetricDiffLinkLengths(this._links, this.linkAccessor, w);\n            return this;\n        }\n\n        /**\n         * compute an ideal length for each link based on the graph structure around that link.\n         * you can use this (for example) to create extra space around hub-nodes in dense graphs.\n         * In particular this calculation is based on the \"symmetric difference\" in the neighbour sets of the source and target:\n         * i.e. if neighbours of source is a and neighbours of target are b then calculation is: |a intersection b|/|a union b|\n         * Actual computation based on inspection of link structure occurs in start(), so links themselves\n         * don't have to have been assigned before invoking this function.\n         * @param {number} [idealLength] the base length for an edge when its source and start have no other common neighbours (e.g. 40)\n         * @param {number} [w] a multiplier for the effect of the length adjustment (e.g. 0.7)\n         */\n        jaccardLinkLengths(idealLength: number, w: number = 1): this {\n            this.linkDistance(l => idealLength * l.length);\n            this._linkLengthCalculator = () => jaccardLinkLengths(this._links, this.linkAccessor, w);\n            return this;\n        }\n\n        /**\n         * start the layout process\n         * @method start\n         * @param {number} [initialUnconstrainedIterations=0] unconstrained initial layout iterations\n         * @param {number} [initialUserConstraintIterations=0] initial layout iterations with user-specified constraints\n         * @param {number} [initialAllConstraintsIterations=0] initial layout iterations with all constraints including non-overlap\n         * @param {number} [gridSnapIterations=0] iterations of \"grid snap\", which pulls nodes towards grid cell centers - grid of size node[0].width - only really makes sense if all nodes have the same width and height\n         * @param [keepRunning=true] keep iterating shronously via the tick method\n         * @param [centerGraph=true] Center graph on restart\n         */\n        async start(\n            initialUnconstrainedIterations: number = 0,\n            initialUserConstraintIterations: number = 0,\n            initialAllConstraintsIterations: number = 0,\n            gridSnapIterations: number = 0,\n            keepRunning = true,\n            centerGraph = true,\n        ): Promise<this> {\n            var i: number,\n                j: number,\n                n = (<Array<any>>this.nodes()).length,\n                N = n + 2 * this._groups.length,\n                m = this._links.length,\n                w = this._canvasSize[0],\n                h = this._canvasSize[1];\n\n            var x = new Array(N), y = new Array(N);\n\n            var G = null;\n\n            var ao = this._avoidOverlaps;\n\n            this._nodes.forEach((v, i) => {\n                v.index = i;\n                if (typeof v.x === 'undefined') {\n                    v.x = w / 2, v.y = h / 2;\n                }\n                x[i] = v.x, y[i] = v.y;\n            });\n\n            if (this._linkLengthCalculator) this._linkLengthCalculator();\n\n            //should we do this to clearly label groups?\n            //this._groups.forEach((g, i) => g.groupIndex = i);\n\n            var distances;\n            if (this._distanceMatrix) {\n                // use the user specified distanceMatrix\n                distances = this._distanceMatrix;\n            } else {\n                // construct an n X n distance matrix based on shortest paths through graph (with respect to edge.length).\n                distances = (new Calculator(N, this._links, Layout.getSourceIndex, Layout.getTargetIndex, l=> this.getLinkLength(l))).DistanceMatrix();\n\n                // G is a square matrix with G[i][j] = 1 iff there exists an edge between node i and node j\n                // otherwise 2. (\n                G = Descent.createSquareMatrix(N, () => 2);\n                this._links.forEach(l => {\n                    if (typeof l.source == \"number\") l.source = this._nodes[<number>l.source];\n                    if (typeof l.target == \"number\") l.target = this._nodes[<number>l.target];\n                });\n                this._links.forEach(e => {\n                    const u = Layout.getSourceIndex(e), v = Layout.getTargetIndex(e);\n                    G[u][v] = G[v][u] = e.weight || 1;\n                });\n            }\n\n            var D = Descent.createSquareMatrix(N, function (i, j) {\n                return distances[i][j];\n            });\n\n            if (this._rootGroup && typeof this._rootGroup.groups !== 'undefined') {\n                var i = n;\n                var addAttraction = (i, j, strength, idealDistance) => {\n                    G[i][j] = G[j][i] = strength;\n                    D[i][j] = D[j][i] = idealDistance;\n                };\n                this._groups.forEach(g => {\n                    addAttraction(i, i + 1, this._groupCompactness, 0.1);\n\n                    // todo: add terms here attracting children of the group to the group dummy nodes\n                    //if (typeof g.leaves !== 'undefined')\n                    //    g.leaves.forEach(l => {\n                    //        addAttraction(l.index, i, 1e-4, 0.1);\n                    //        addAttraction(l.index, i + 1, 1e-4, 0.1);\n                    //    });\n                    //if (typeof g.groups !== 'undefined')\n                    //    g.groups.forEach(g => {\n                    //        var gid = n + g.groupIndex * 2;\n                    //        addAttraction(gid, i, 0.1, 0.1);\n                    //        addAttraction(gid + 1, i, 0.1, 0.1);\n                    //        addAttraction(gid, i + 1, 0.1, 0.1);\n                    //        addAttraction(gid + 1, i + 1, 0.1, 0.1);\n                    //    });\n\n                    if (typeof g.bounds === 'undefined') {\n                        x[i] = w / 2, y[i++] = h / 2;\n                        x[i] = w / 2, y[i++] = h / 2;\n                    } else {\n                        x[i] = g.bounds.x, y[i++] = g.bounds.y;\n                        x[i] = g.bounds.X, y[i++] = g.bounds.Y;\n                    }\n                });\n            } else this._rootGroup = { leaves: this._nodes, groups: [] };\n\n            var curConstraints = this._constraints || [];\n            if (this._directedLinkConstraints) {\n                (<any>this.linkAccessor).getMinSeparation = this._directedLinkConstraints.getMinSeparation;\n                curConstraints = curConstraints.concat(generateDirectedEdgeConstraints(n, this._links, this._directedLinkConstraints.axis, <any>(this.linkAccessor)));\n\n                // todo: add containment constraints between group dummy nodes and their children\n            }\n\n            this.avoidOverlaps(false);\n            const wasmInst = await wasmInstPromise;\n            this._descent = new Descent([x, y], D, undefined, wasmInst);\n\n            this._descent.locks.clear();\n            for (var i = 0; i < n; ++i) {\n                var o = this._nodes[i];\n                if (o.fixed) {\n                    o.px = o.x;\n                    o.py = o.y;\n                    var p = [o.x, o.y];\n                    this._descent.locks.add(i, p);\n                }\n            }\n            this._descent.threshold = this._threshold;\n\n            // apply initialIterations without user constraints or nonoverlap constraints\n            // if groups are specified, dummy nodes and edges will be added to untangle\n            // with respect to group connectivity\n            this.initialLayout(initialUnconstrainedIterations, x, y);\n\n            // apply initialIterations with user constraints but no nonoverlap constraints\n            if (curConstraints.length > 0) this._descent.project = new Projection(this._nodes, this._groups, this._rootGroup, curConstraints).projectFunctions();\n            this._descent.run(initialUserConstraintIterations);\n            this.separateOverlappingComponents(w, h, centerGraph);\n\n            // subsequent iterations will apply all constraints\n            this.avoidOverlaps(ao);\n            if (ao) {\n                this._nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\n                this._descent.project = new Projection(this._nodes, this._groups, this._rootGroup, curConstraints, true).projectFunctions();\n                this._nodes.forEach(function (v, i) { x[i] = v.x, y[i] = v.y; });\n            }\n\n            // allow not immediately connected nodes to relax apart (p-stress)\n            this._descent.G = G;\n            this._descent.run(initialAllConstraintsIterations);\n\n            // TODO\n            // if (gridSnapIterations) {\n            //     this._descent.snapStrength = 1000;\n            //     this._descent.snapGridSize = this._nodes[0].width;\n            //     this._descent.numGridSnapNodes = n;\n            //     this._descent.scaleSnapByMaxH = n != N; // if we have groups then need to scale hessian so grid forces still apply\n            //     var G0 = Descent.createSquareMatrix(N,(i, j) => {\n            //         if (i >= n || j >= n) return G[i][j];\n            //         return 0\n            //     });\n            //     this._descent.G = G0;\n            //     this._descent.run(gridSnapIterations);\n            // }\n\n            this.updateNodePositions();\n            this.separateOverlappingComponents(w, h, centerGraph);\n            return keepRunning ? this.resume() : this;\n        }\n\n        private initialLayout(iterations: number, x: number[], y: number[]) {\n            if (this._groups.length > 0 && iterations > 0) {\n                // construct a flat graph with dummy nodes for the groups and edges connecting group dummy nodes to their children\n                // todo: edges attached to groups are replaced with edges connected to the corresponding group dummy node\n                var n = this._nodes.length;\n                var edges = this._links.map(e => <any>{ source: (<Node>e.source).index, target: (<Node>e.target).index });\n                var vs = this._nodes.map(v => <any>{ index: v.index });\n                this._groups.forEach((g, i) => {\n                    vs.push(<any>{ index: g.index = n + i });\n                });\n                this._groups.forEach((g, i) => {\n                    if (typeof g.leaves !== 'undefined')\n                        g.leaves.forEach(v => edges.push({ source: g.index, target: v.index }));\n                    if (typeof g.groups !== 'undefined')\n                        g.groups.forEach(gg => edges.push({ source: g.index, target: gg.index }));\n                });\n\n                // layout the flat graph with dummy nodes and edges\n                new Layout()\n                    .size(this.size())\n                    .nodes(vs)\n                    .links(edges)\n                    .avoidOverlaps(false)\n                    .linkDistance(this.linkDistance())\n                    .symmetricDiffLinkLengths(5)\n                    .convergenceThreshold(1e-4)\n                    .start(iterations, 0, 0, 0, false);\n\n                this._nodes.forEach(v => {\n                    x[v.index] = vs[v.index].x;\n                    y[v.index] = vs[v.index].y;\n                });\n            } else {\n                this._descent.run(iterations);\n            }\n        }\n\n        // recalculate nodes position for disconnected graphs\n        private separateOverlappingComponents(width: number, height: number, centerGraph: boolean = true): void {\n            // recalculate nodes position for disconnected graphs\n            if (!this._distanceMatrix && this._handleDisconnected) {\n                let x = this._descent.x[0], y = this._descent.x[1];\n                this._nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\n                var graphs = separateGraphs(this._nodes, this._links);\n                applyPacking(graphs, width, height, this._defaultNodeSize, 1, centerGraph);\n                this._nodes.forEach((v, i) => {\n                    this._descent.x[0][i] = v.x, this._descent.x[1][i] = v.y;\n                    if (v.bounds) {\n                        v.bounds.setXCentre(v.x);\n                        v.bounds.setYCentre(v.y);\n                    }\n                });\n            }\n        }\n\n        resume(): this {\n            return this.alpha(0.1);\n        }\n\n        pause(): this {\n            return this.alpha(0);\n        }\n\n        stop(): this {\n            if (this._descent) {\n                this._descent.cleanWasmMemory();\n            }\n            return this.alpha(0);\n        }\n\n        /// find a visibility graph over the set of nodes.  assumes all nodes have a\n        /// bounds property (a rectangle) and that no pair of bounds overlaps.\n        prepareEdgeRouting(nodeMargin: number = 0) {\n            this._visibilityGraph = new TangentVisibilityGraph(\n                this._nodes.map(function (v) {\n                    return v.bounds.inflate(-nodeMargin).vertices();\n                }));\n        }\n\n        /**\n         * find a route avoiding node bounds for the given edge.\n         * assumes the visibility graph has been created (by prepareEdgeRouting method)\n         * and also assumes that nodes have an index property giving their position in the\n         * node array.  This index property is created by the start() method.\n         * @param [edge] The edge to generate a route for.\n         * @param {number} [ah] The size of the arrow head, a distance to shorten the end\n         *                      of the edge by.  Defaults to 5.\n         */\n        routeEdge(edge, ah: number = 5, draw) {\n            var lineData = [];\n            //if (d.source.id === 10 && d.target.id === 11) {\n            //    debugger;\n            //}\n            var vg2 = new TangentVisibilityGraph(this._visibilityGraph.P, { V: this._visibilityGraph.V, E: this._visibilityGraph.E }),\n                port1 = <TVGPoint>{ x: edge.source.x, y: edge.source.y },\n                port2 = <TVGPoint>{ x: edge.target.x, y: edge.target.y },\n                start = vg2.addPoint(port1, edge.source.index),\n                end = vg2.addPoint(port2, edge.target.index);\n            vg2.addEdgeIfVisible(port1, port2, edge.source.index, edge.target.index);\n            if (typeof draw !== 'undefined') {\n                draw(vg2);\n            }\n            var sourceInd = e => e.source.id, targetInd = e => e.target.id, length = e => e.length(),\n                spCalc = new Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length),\n                shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);\n            if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {\n                let route = makeEdgeBetween(edge.source.innerBounds, edge.target.innerBounds, ah);\n                lineData = [route.sourceIntersection, route.arrowStart];\n            } else {\n                var n = shortestPath.length - 2,\n                    p = vg2.V[shortestPath[n]].p,\n                    q = vg2.V[shortestPath[0]].p,\n                    lineData = [edge.source.innerBounds.rayIntersection(p.x, p.y)];\n                for (var i = n; i >= 0; --i)\n                    lineData.push(vg2.V[shortestPath[i]].p);\n                lineData.push(makeEdgeTo(q, edge.target.innerBounds, ah));\n            }\n            //lineData.forEach((v, i) => {\n            //    if (i > 0) {\n            //        var u = lineData[i - 1];\n            //        this._nodes.forEach(function (node) {\n            //            if (node.id === getSourceIndex(d) || node.id === getTargetIndex(d)) return;\n            //            var ints = node.innerBounds.lineIntersections(u.x, u.y, v.x, v.y);\n            //            if (ints.length > 0) {\n            //                debugger;\n            //            }\n            //        })\n            //    }\n            //})\n            return lineData;\n        }\n\n        //The link source and target may be just a node index, or they may be references to nodes themselves.\n        static getSourceIndex(e: Link<Node | number>): number {\n            return typeof e.source === 'number' ? <number>e.source : (<Node>e.source).index;\n        }\n\n        //The link source and target may be just a node index, or they may be references to nodes themselves.\n        static getTargetIndex(e: Link<Node | number>): number {\n            return typeof e.target === 'number' ? <number>e.target : (<Node>e.target).index;\n        }\n\n        // Get a string ID for a given link.\n        static linkId(e: Link<Node | number>): string {\n            return Layout.getSourceIndex(e) + \"-\" + Layout.getTargetIndex(e);\n        }\n\n        // The fixed property has three bits:\n        // Bit 1 can be set externally (e.g., d.fixed = true) and show persist.\n        // Bit 2 stores the dragging state, from mousedown to mouseup.\n        // Bit 3 stores the hover state, from mouseover to mouseout.\n        static dragStart(d: Node | Group) {\n            if (isGroup(d)) {\n                Layout.storeOffset(d, Layout.dragOrigin(d));\n            } else {\n                Layout.stopNode(d);\n                d.fixed |= 2; // set bit 2\n            }\n        }\n\n        // we clobber any existing desired positions for nodes\n        // in case another tick event occurs before the drag\n        private static stopNode(v: Node) {\n            (<any>v).px = v.x;\n            (<any>v).py = v.y;\n        }\n\n        // we store offsets for each node relative to the centre of the ancestor group\n        // being dragged in a pair of properties on the node\n        private static storeOffset(d: Group, origin: { x: number, y: number }) {\n            if (typeof d.leaves !== 'undefined') {\n                d.leaves.forEach(v => {\n                    v.fixed |= 2;\n                    Layout.stopNode(v);\n                    (<any>v)._dragGroupOffsetX = v.x - origin.x;\n                    (<any>v)._dragGroupOffsetY = v.y - origin.y;\n                });\n            }\n            if (typeof d.groups !== 'undefined') {\n                d.groups.forEach(g => Layout.storeOffset(g, origin));\n            }\n        }\n\n        // the drag origin is taken as the centre of the node or group\n        static dragOrigin(d: Node | Group): { x: number, y: number } {\n            if (isGroup(d)) {\n                return {\n                    x: d.bounds.cx(),\n                    y: d.bounds.cy()\n                };\n            } else {\n                return d;\n            }\n        }\n\n        // for groups, the drag translation is propagated down to all of the children of\n        // the group.\n        static drag(d: Node | Group, position: { x: number, y: number }) {\n            if (isGroup(d)) {\n                if (typeof d.leaves !== 'undefined') {\n                    d.leaves.forEach(v => {\n                        d.bounds.setXCentre(position.x);\n                        d.bounds.setYCentre(position.y);\n                        (<any>v).px = (<any>v)._dragGroupOffsetX + position.x;\n                        (<any>v).py = (<any>v)._dragGroupOffsetY + position.y;\n                    });\n                }\n                if (typeof d.groups !== 'undefined') {\n                    d.groups.forEach(g => Layout.drag(g, position));\n                }\n            } else {\n                (<any>d).px = position.x;\n                (<any>d).py = position.y;\n            }\n        }\n\n        // we unset only bits 2 and 3 so that the user can fix nodes with another a different\n        // bit such that the lock persists between drags\n        static dragEnd(d) {\n            if (isGroup(d)) {\n                if (typeof d.leaves !== 'undefined') {\n                    d.leaves.forEach(v => {\n                        Layout.dragEnd(v);\n                        delete (<any>v)._dragGroupOffsetX;\n                        delete (<any>v)._dragGroupOffsetY;\n                    });\n                }\n                if (typeof d.groups !== 'undefined') {\n                    d.groups.forEach(Layout.dragEnd);\n                }\n            } else {\n                d.fixed &= ~6; // unset bits 2 and 3\n                //d.fixed = 0;\n            }\n        }\n\n        // in d3 hover temporarily locks nodes, currently not used in cola\n        static mouseOver(d) {\n            d.fixed |= 4; // set bit 3\n            d.px = d.x, d.py = d.y; // set velocity to zero\n        }\n\n        // in d3 hover temporarily locks nodes, currently not used in cola\n        static mouseOut(d) {\n            d.fixed &= ~4; // unset bit 3\n        }\n    }\n","import {Layout, EventType, Event} from './layout'\n\n    export class LayoutAdaptor extends Layout {\n\n        // dummy functions in case not defined by client\n        trigger(e: Event) {};\n        kick() {};\n        drag() {};\n        on(eventType: EventType | string, listener: () => void) : this { return this; };\n\n        dragstart: (d:any) => void;\n        dragStart: (d:any) => void;\n        dragend: (d:any) => void;\n        dragEnd: (d:any) => void;\n\n        constructor( options ) {\n            super();\n\n            // take in implementation as defined by client\n\n            var self = this;\n            var o = options;\n\n            if ( o.trigger ) {\n                this.trigger = o.trigger;\n            }\n\n            if ( o.kick ){\n                this.kick = o.kick;\n            }\n\n            if ( o.drag ){\n                this.drag = o.drag;\n            }\n\n            if ( o.on ){\n                this.on = o.on;\n            }\n\n            this.dragstart = this.dragStart = Layout.dragStart;\n            this.dragend = this.dragEnd = Layout.dragEnd;\n        }\n    }\n\n    /**\n     * provides an interface for use with any external graph system (e.g. Cytoscape.js):\n     */\n    export function adaptor( options ): LayoutAdaptor {\n        return new LayoutAdaptor( options );\n    }\n","////<reference path=\"../extern/d3v3.d.ts\"/>\n////commented out the reference, because the path ended up in the typings, which\n////makes it impossible import in other projects.\n// declare const d3;\n\n\nimport {Layout, EventType, Event} from './layout';\nimport {ID3StyleLayoutAdaptor} from './d3adaptor'\n\n    /**\n     * @internal\n     */\n    export class D3StyleLayoutAdaptor extends Layout implements ID3StyleLayoutAdaptor {\n        protected readonly event: any;\n\n        trigger(e: Event) {\n            var d3event = { type: EventType[e.type], alpha: e.alpha, stress: e.stress };\n            this.event[d3event.type](d3event); // via d3 dispatcher, e.g. event.start(e);\n        }\n\n        // iterate layout using a d3.timer, which queues calls to tick repeatedly until tick returns true\n        kick() {\n            this.d3Context.timer(() => super.tick());\n        }\n\n        // a function to allow for dragging of nodes\n        drag: () => any;\n\n        private d3Context: any;\n\n        constructor(d3Context: any = self.d3) {\n            super();\n            this.d3Context = d3Context;\n            this.event = d3Context.dispatch(EventType[EventType.start], EventType[EventType.tick], EventType[EventType.end]);\n            // bit of trickyness remapping 'this' so we can reference it in the function body.\n            var d3layout = this;\n            var drag;\n            this.drag = function () {\n                if (!drag) {\n                    var drag = d3Context.behavior.drag()\n                        .origin(Layout.dragOrigin)\n                        .on(\"dragstart.d3adaptor\", Layout.dragStart)\n                        .on(\"drag.d3adaptor\", d => {\n                            Layout.drag(d, <any>d3layout.d3Context.event);\n                            d3layout.resume(); // restart annealing\n                        })\n                        .on(\"dragend.d3adaptor\", Layout.dragEnd);\n                }\n\n                if (!arguments.length) return drag;\n\n                // this is the context of the function, i.e. the d3 selection\n                this//.on(\"mouseover.adaptor\", colaMouseover)\n                //.on(\"mouseout.adaptor\", colaMouseout)\n                    .call(drag);\n            }\n        }\n\n        // a function for binding to events on the adapter\n        on(eventType: EventType | string, listener: () => void): this {\n            if (typeof eventType === 'string') {\n                this.event.on(eventType, listener);\n            } else {\n                this.event.on(EventType[eventType], listener);\n            }\n            return this;\n        }\n    }\n","import {dispatch} from 'd3-dispatch'\nimport {timer} from 'd3-timer'\nimport {drag as d3drag} from 'd3-drag'\nimport {Layout, EventType, Event} from './layout'\nimport {ID3StyleLayoutAdaptor} from './d3adaptor'\n\nexport interface D3Context {\n    timer: typeof timer; \n    drag: typeof d3drag; \n    dispatch: typeof dispatch;\n    event: any;\n}\n\n/**\n * @internal\n */\nexport class D3v4StyleLayoutAdaptor extends Layout implements ID3StyleLayoutAdaptor {\n    event:any;\n    trigger(e: Event) {\n        var d3event = { type: EventType[e.type], alpha: e.alpha, stress: e.stress };\n        // the dispatcher is actually expecting something of type EventTarget as the second argument\n        // so passing the thing above is totally abusing the pattern... not sure what to do about this yet\n        this.event.call(d3event.type, <any>d3event); // via d3 dispatcher, e.g. event.start(e);\n    }\n\n    // iterate layout using a d3.timer, which queues calls to tick repeatedly until tick returns true\n    kick() {\n        var t = this.d3Context.timer(() => super.tick() && t.stop());\n    }\n\n    // a function to allow for dragging of nodes\n    drag: () => any;\n\n    /**\n     * @internal\n     */\n    private readonly d3Context: D3Context;\n\n    constructor(d3Context: D3Context) {\n        super();\n        this.d3Context = d3Context;\n        this.event = d3Context.dispatch(EventType[EventType.start], EventType[EventType.tick], EventType[EventType.end]);\n\n        // bit of trickyness remapping 'this' so we can reference it in the function body.\n        var d3layout = this;\n        var drag;\n        this.drag = function () {\n            if (!drag) {\n                var drag = d3Context.drag()\n                    .subject(Layout.dragOrigin)\n                    .on(\"start.d3adaptor\", Layout.dragStart)\n                    .on(\"drag.d3adaptor\", d => {\n                        Layout.drag(<any>d, d3Context.event);\n                        d3layout.resume(); // restart annealing\n                    })\n                    .on(\"end.d3adaptor\", Layout.dragEnd);\n            }\n\n            if (!arguments.length) return drag;\n\n            // this is the context of the function, i.e. the d3 selection\n            //this//.on(\"mouseover.adaptor\", colaMouseover)\n            //.on(\"mouseout.adaptor\", colaMouseout)\n            arguments[0].call(drag);\n        }\n    }\n\n    // a function for binding to events on the adapter\n    on(eventType: EventType | string, listener: () => void): this {\n        if (typeof eventType === 'string') {\n            this.event.on(eventType, listener);\n        } else {\n            this.event.on(EventType[eventType], listener);\n        }\n        return this;\n    }\n}\n","import {D3StyleLayoutAdaptor} from './d3v3adaptor'\nimport {D3Context, D3v4StyleLayoutAdaptor} from './d3v4adaptor'\nimport { Layout, EventType, Event } from './layout';\n\nexport { D3Context } from './d3v4adaptor';\n\nexport interface D3v3Context { version: string };\n\nexport interface ID3StyleLayoutAdaptor {\n    trigger(e: Event): void;\n    kick(): void;\n    drag: () => any;\n\n    on(eventType: EventType | string, listener: () => void): ID3StyleLayoutAdaptor;\n}\n\n\n/**\n * provides an interface for use with d3:\n * Correct way to create way to construct the d3 cola object is to pass the d3 object into the adaptor function, like so:\n * \n *   `var d3cola = cola.d3adaptor(d3);`\n * \n * Internally, it will figure out if d3 is version 3 or 4 from the version tag and set up the right event forwarding. Defaults to version 3 if the d3 object is not passed.\n * - uses the d3 event system to dispatch layout events such as:\n *   o \"start\" (start layout process)\n *   o \"tick\" (after each layout iteration)\n *   o \"end\" (layout converged and complete).\n * - uses the d3 timer to queue layout iterations.\n * - sets up d3.behavior.drag to drag nodes\n *   o use `node.call(<the returned instance of Layout>.drag)` to make nodes draggable\n * returns an instance of the cola.Layout itself with which the user\n * can interact directly.\n */\nexport function d3adaptor(d3Context?: D3Context | D3v3Context): Layout & ID3StyleLayoutAdaptor {\n    if (!d3Context || isD3V3(d3Context)) {\n        return new D3StyleLayoutAdaptor(d3Context);\n    }\n    return new D3v4StyleLayoutAdaptor(d3Context);\n}\n\nfunction isD3V3(d3Context: D3Context | D3v3Context): d3Context is D3v3Context {\n    const v3exp = /^3\\./;\n    return (<any>d3Context).version && (<any>d3Context).version.match(v3exp) !== null;\n}\n","import {Point} from './geom'\nimport {Rectangle} from './rectangle'\nimport {Constraint, Solver, Variable} from './vpsc'\nimport {Calculator} from './shortestpaths'\n    export interface NodeAccessor<Node>{\n        getChildren(v:Node) : number[];\n        getBounds(v:Node) : Rectangle;\n    }\n    export class NodeWrapper {\n        leaf: boolean;\n        parent: NodeWrapper;\n        ports: Vert[];\n        constructor(public id: number, public rect: Rectangle, public children: number[]) {\n            this.leaf = typeof children === 'undefined' || children.length === 0;\n        }\n    }\n    export class Vert {\n        constructor(public id: number, public x:number, public y: number, public node: NodeWrapper = null, public line = null) {}\n    }\n\n    export class LongestCommonSubsequence<T> {\n        length: number;\n        si: number;\n        ti: number;\n        reversed: boolean;\n        constructor(public s: T[], public t: T[]) {\n            var mf = LongestCommonSubsequence.findMatch(s, t);\n            var tr = t.slice(0).reverse();\n            var mr = LongestCommonSubsequence.findMatch(s, tr);\n            if (mf.length >= mr.length) {\n                this.length = mf.length;\n                this.si = mf.si;\n                this.ti = mf.ti;\n                this.reversed = false;\n            } else {\n                this.length = mr.length;\n                this.si = mr.si;\n                this.ti = t.length - mr.ti - mr.length;\n                this.reversed = true;\n            }\n        }\n        private static findMatch<T>(s: T[], t: T[]) {\n            var m = s.length;\n            var n = t.length;\n            var match = { length: 0, si: -1, ti: -1 };\n            var l = new Array(m);\n            for (var i = 0; i < m; i++) {\n                l[i] = new Array(n);\n                for (var j = 0; j < n; j++)\n                    if (s[i] === t[j]) {\n                        var v = l[i][j] = (i === 0 || j === 0) ? 1 : l[i - 1][j - 1] + 1;\n                        if (v > match.length) {\n                            match.length = v;\n                            match.si = i - v + 1;\n                            match.ti = j - v + 1;\n                        };\n                    } else l[i][j] = 0;\n            }\n            return match;\n        }\n        getSequence(): T[]{\n            return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];\n        }\n    }\n    // a horizontal or vertical line of nodes\n    export interface GridLine {\n        nodes: NodeWrapper[];\n        pos: number;\n    }\n    export class GridRouter<Node> {\n        leaves: NodeWrapper[] = null;\n        groups: NodeWrapper[];\n        nodes: NodeWrapper[];\n        cols: GridLine[];\n        rows: GridLine[];\n        root;\n        verts: Vert[];\n        edges;\n        backToFront;\n        obstacles;\n        passableEdges;\n        private avg(a) { return a.reduce((x, y) => x + y) / a.length }\n\n        // in the given axis, find sets of leaves overlapping in that axis\n        // center of each GridLine is average of all nodes in column\n        private getGridLines(axis): GridLine[] {\n            var columns = [];\n            var ls = this.leaves.slice(0, this.leaves.length);\n            while (ls.length > 0) {\n                // find a column of all leaves overlapping in axis with the first leaf\n                let overlapping = ls.filter(v=> v.rect['overlap' + axis.toUpperCase()](ls[0].rect));\n                let col = {\n                    nodes: overlapping,\n                    pos: this.avg(overlapping.map(v=> v.rect['c' + axis]()))\n                };\n                columns.push(col);\n                col.nodes.forEach(v=> ls.splice(ls.indexOf(v), 1));\n            }\n            columns.sort((a, b) => a.pos - b.pos)\n            return columns;\n        }\n\n        // get the depth of the given node in the group hierarchy\n        private getDepth(v) {\n            var depth = 0;\n            while (v.parent !== this.root) {\n                depth++;\n                v = v.parent;\n            }\n            return depth;\n        }\n\n        // medial axes between node centres and also boundary lines for the grid\n        private midPoints(a) {\n            if (a.length === 1) {\n                return [a[0]]\n            }\n\n            var gap = a[1] - a[0];\n            var mids = [a[0] - gap / 2];\n            for (var i = 1; i < a.length; i++) {\n                mids.push((a[i] + a[i - 1]) / 2);\n            }\n            mids.push(a[a.length - 1] + gap / 2);\n            return mids;\n        }\n\n        constructor(public originalnodes: Node[], accessor: NodeAccessor<Node>, public groupPadding: number = 12) {\n            this.nodes = originalnodes.map((v, i) => new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v)));\n            this.leaves = this.nodes.filter(v=> v.leaf);\n            this.groups = this.nodes.filter(g=> !g.leaf);\n            this.cols = this.getGridLines('x');\n            this.rows = this.getGridLines('y');\n\n            // create parents for each node or group that is a member of another's children\n            this.groups.forEach(v=>\n                v.children.forEach(c=> this.nodes[<number>c].parent = v));\n\n            // root claims the remaining orphans\n            this.root = { children: [] };\n            this.nodes.forEach(v=> {\n                if (typeof v.parent === 'undefined') {\n                    v.parent = this.root;\n                    this.root.children.push(v.id);\n                }\n\n                // each node will have grid vertices associated with it,\n                // some inside the node and some on the boundary\n                // leaf nodes will have exactly one internal node at the center\n                // and four boundary nodes\n                // groups will have potentially many of each\n                v.ports = []\n            });\n\n            // nodes ordered by their position in the group hierarchy\n            this.backToFront = this.nodes.slice(0);\n            this.backToFront.sort((x, y) => this.getDepth(x) - this.getDepth(y));\n\n            // compute boundary rectangles for each group\n            // has to be done from front to back, i.e. inside groups to outside groups\n            // such that each can be made large enough to enclose its interior\n            var frontToBackGroups = this.backToFront.slice(0).reverse().filter(g=> !g.leaf);\n            frontToBackGroups.forEach(v=> {\n                var r = Rectangle.empty();\n                v.children.forEach(c=> r = r.union(this.nodes[c].rect));\n                v.rect = r.inflate(this.groupPadding);\n            });\n\n            var colMids = this.midPoints(this.cols.map(r=> r.pos));\n            var rowMids = this.midPoints(this.rows.map(r=> r.pos));\n\n            // setup extents of lines\n            var rowx = colMids[0], rowX = colMids[colMids.length - 1];\n            var coly = rowMids[0], colY = rowMids[rowMids.length - 1];\n\n            // horizontal lines\n            var hlines = this.rows.map(r=> <any>{ x1: rowx, x2: rowX, y1: r.pos, y2: r.pos })\n                .concat(rowMids.map(m=> <any>{ x1: rowx, x2: rowX, y1: m, y2: m }));\n\n            // vertical lines\n            var vlines = this.cols.map(c=> <any>{ x1: c.pos, x2: c.pos, y1: coly, y2: colY })\n                .concat(colMids.map(m=> <any>{ x1: m, x2: m, y1: coly, y2: colY }));\n\n            // the full set of lines\n            var lines = hlines.concat(vlines);\n\n            // we record the vertices associated with each line\n            lines.forEach(l=> l.verts = []);\n\n            // the routing graph\n            this.verts = [];\n            this.edges = [];\n\n            // create vertices at the crossings of horizontal and vertical grid-lines\n            hlines.forEach(h=>\n                vlines.forEach(v=> {\n                    var p = new Vert(this.verts.length, v.x1, h.y1);\n                    h.verts.push(p);\n                    v.verts.push(p);\n                    this.verts.push(p);\n\n                    // assign vertices to the nodes immediately under them\n                    var i = this.backToFront.length;\n                    while (i-- > 0) {\n                        var node = this.backToFront[i],\n                            r = node.rect;\n                        var dx = Math.abs(p.x - r.cx()),\n                            dy = Math.abs(p.y - r.cy());\n                        if (dx < r.width() / 2 && dy < r.height() / 2) {\n                            (<any>p).node = node;\n                            break;\n                        }\n                    }\n                })\n                );\n\n            lines.forEach((l, li) => {\n                // create vertices at the intersections of nodes and lines\n                this.nodes.forEach((v, i) => {\n                    v.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach((intersect, j) => {\n                        //console.log(li+','+i+','+j+':'+intersect.x + ',' + intersect.y);\n                        var p = new Vert(this.verts.length, intersect.x, intersect.y, v, l);\n                        this.verts.push(p);\n                        l.verts.push(p);\n                        v.ports.push(p);\n                    });\n                });\n\n                // split lines into edges joining vertices\n                var isHoriz = Math.abs(l.y1 - l.y2) < 0.1;\n                var delta = (a, b) => isHoriz ? b.x - a.x : b.y - a.y;\n                l.verts.sort(delta);\n                for (var i = 1; i < l.verts.length; i++) {\n                    var u = l.verts[i - 1], v = l.verts[i];\n                    if (u.node && u.node === v.node && u.node.leaf) continue;\n                    this.edges.push({ source: u.id, target: v.id, length: Math.abs(delta(u, v)) });\n                }\n            });\n\n\n\n        }\n\n        // find path from v to root including both v and root\n        private findLineage(v) {\n            var lineage = [v];\n            do {\n                v = v.parent;\n                lineage.push(v);\n            } while (v !== this.root);\n            return lineage.reverse();\n        }\n\n        // find path connecting a and b through their lowest common ancestor\n        private findAncestorPathBetween(a, b) {\n            var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;\n            while (aa[i] === ba[i]) i++;\n            // i-1 to include common ancestor only once (as first element)\n            return { commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i)) };\n        }\n\n        // when finding a path between two nodes a and b, siblings of a and b on the\n        // paths from a and b to their least common ancestor are obstacles\n        siblingObstacles(a, b) {\n            var path = this.findAncestorPathBetween(a, b);\n            var lineageLookup = {};\n            path.lineages.forEach(v=> lineageLookup[v.id] = {});\n            var obstacles = path.commonAncestor.children.filter(v=> !(v in lineageLookup));\n\n            path.lineages\n                .filter(v=> v.parent !== path.commonAncestor)\n                .forEach(v=> obstacles = obstacles.concat(v.parent.children.filter(c=> c !== v.id)));\n\n            return obstacles.map(v=> this.nodes[v]);\n        }\n\n        // for the given routes, extract all the segments orthogonal to the axis x\n        // and return all them grouped by x position\n        static getSegmentSets(routes, x, y) {\n            // vsegments is a list of vertical segments sorted by x position\n            var vsegments = [];\n            for (var ei = 0; ei < routes.length; ei++) {\n                var route = routes[ei];\n                for (var si = 0; si < route.length; si++) {\n                    var s = <any>route[si];\n                    s.edgeid = ei;\n                    s.i = si;\n                    var sdx = s[1][x] - s[0][x];\n                    if (Math.abs(sdx) < 0.1) {\n                        vsegments.push(s);\n                    }\n                }\n            }\n            vsegments.sort((a, b) => a[0][x] - b[0][x]);\n\n            // vsegmentsets is a set of sets of segments grouped by x position\n            var vsegmentsets = [];\n            var segmentset = null;\n            for (var i = 0; i < vsegments.length; i++) {\n                var s = vsegments[i];\n                if (!segmentset || Math.abs(s[0][x] - segmentset.pos) > 0.1) {\n                    segmentset = { pos: s[0][x], segments: [] };\n                    vsegmentsets.push(segmentset);\n                }\n                segmentset.segments.push(s);\n            }\n            return vsegmentsets;\n        }\n\n        // for all segments in this bundle create a vpsc problem such that\n        // each segment's x position is a variable and separation constraints\n        // are given by the partial order over the edges to which the segments belong\n        // for each pair s1,s2 of segments in the open set:\n        //   e1 = edge of s1, e2 = edge of s2\n        //   if leftOf(e1,e2) create constraint s1.x + gap <= s2.x\n        //   else if leftOf(e2,e1) create cons. s2.x + gap <= s1.x\n        static nudgeSegs(x: string, y: string, routes, segments, leftOf, gap: number) {\n            var n = segments.length;\n            if (n <= 1) return;\n            var vs = segments.map(s => new Variable(s[0][x]));\n            var cs = [];\n            for (var i = 0; i < n; i++) {\n                for (var j = 0; j < n; j++) {\n                    if (i === j) continue;\n                    var s1 = segments[i],\n                        s2 = segments[j],\n                        e1 = s1.edgeid,\n                        e2 = s2.edgeid,\n                        lind = -1,\n                        rind = -1;\n                    // in page coordinates (not cartesian) the notion of 'leftof' is flipped in the horizontal axis from the vertical axis\n                    // that is, when nudging vertical segments, if they increase in the y(conj) direction the segment belonging to the\n                    // 'left' edge actually needs to be nudged to the right\n                    // when nudging horizontal segments, if the segments increase in the x direction\n                    // then the 'left' segment needs to go higher, i.e. to have y pos less than that of the right\n                    if (x == 'x') {\n                        if (leftOf(e1, e2)) {\n                            //console.log('s1: ' + s1[0][x] + ',' + s1[0][y] + '-' + s1[1][x] + ',' + s1[1][y]);\n                            if (s1[0][y] < s1[1][y]) {\n                                lind = j, rind = i;\n                            } else {\n                                lind = i, rind = j;\n                            }\n                        }\n                    } else {\n                        if (leftOf(e1, e2)) {\n                            if (s1[0][y] < s1[1][y]) {\n                                lind = i, rind = j;\n                            } else {\n                                lind = j, rind = i;\n                            }\n                        }\n                    }\n                    if (lind >= 0) {\n                        //console.log(x+' constraint: ' + lind + '<' + rind);\n                        cs.push(new Constraint(vs[lind], vs[rind], gap));\n                    }\n                }\n            }\n            var solver = new Solver(vs, cs);\n            solver.solve();\n            vs.forEach((v, i) => {\n                var s = segments[i];\n                var pos = v.position();\n                s[0][x] = s[1][x] = pos;\n                var route = routes[s.edgeid];\n                if (s.i > 0) route[s.i - 1][1][x] = pos;\n                if (s.i < route.length - 1) route[s.i + 1][0][x] = pos;\n            });\n        }\n\n        static nudgeSegments(routes, x: string, y: string, leftOf: (e1: number, e2: number) => boolean, gap: number) {\n            var vsegmentsets = GridRouter.getSegmentSets(routes, x, y);\n            // scan the grouped (by x) segment sets to find co-linear bundles\n            for (var i = 0; i < vsegmentsets.length; i++) {\n                var ss = vsegmentsets[i];\n                var events = [];\n                for (var j = 0; j < ss.segments.length; j++) {\n                    var s = ss.segments[j];\n                    events.push({ type: 0, s: s, pos: Math.min(s[0][y], s[1][y]) });\n                    events.push({ type: 1, s: s, pos: Math.max(s[0][y], s[1][y]) });\n                }\n                events.sort((a, b) => a.pos - b.pos + a.type - b.type);\n                var open = [];\n                var openCount = 0;\n                events.forEach(e=> {\n                    if (e.type === 0) {\n                        open.push(e.s);\n                        openCount++;\n                    } else {\n                        openCount--;\n                    }\n                    if (openCount == 0) {\n                        GridRouter.nudgeSegs(x, y, routes, open, leftOf, gap);\n                        open = [];\n                    }\n                });\n            }\n        }\n\n        // obtain routes for the specified edges, nicely nudged apart\n        // warning: edge paths may be reversed such that common paths are ordered consistently within bundles!\n        // @param edges list of edges\n        // @param nudgeGap how much to space parallel edge segements\n        // @param source function to retrieve the index of the source node for a given edge\n        // @param target function to retrieve the index of the target node for a given edge\n        // @returns an array giving, for each edge, an array of segments, each segment a pair of points in an array\n        routeEdges<Edge>(edges: Edge[], nudgeGap: number, source: (e: Edge) => number, target: (e: Edge) => number): Point[][][] {\n            var routePaths = edges.map(e=> this.route(source(e), target(e)));\n            var order = GridRouter.orderEdges(routePaths);\n            var routes = routePaths.map(function (e) { return GridRouter.makeSegments(e); });\n            GridRouter.nudgeSegments(routes, 'x', 'y', order, nudgeGap);\n            GridRouter.nudgeSegments(routes, 'y', 'x', order, nudgeGap);\n            GridRouter.unreverseEdges(routes, routePaths);\n            return routes;\n        }\n\n        // path may have been reversed by the subsequence processing in orderEdges\n        // so now we need to restore the original order\n        static unreverseEdges(routes, routePaths) {\n            routes.forEach((segments, i) => {\n                var path = routePaths[i];\n                if ((<any>path).reversed) {\n                    segments.reverse(); // reverse order of segments\n                    segments.forEach(function (segment) {\n                        segment.reverse();  // reverse each segment\n                    });\n                }\n            });\n        }\n\n        static angleBetween2Lines(line1: Point[], line2: Point[]): number {\n            var angle1 = Math.atan2(line1[0].y - line1[1].y,\n                line1[0].x - line1[1].x);\n            var angle2 = Math.atan2(line2[0].y - line2[1].y,\n                line2[0].x - line2[1].x);\n            var diff = angle1 - angle2;\n            if (diff > Math.PI || diff < -Math.PI) {\n                diff = angle2 - angle1;\n            }\n            return diff;\n        }\n\n        // does the path a-b-c describe a left turn?\n        private static isLeft(a, b, c) {\n            return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) <= 0;\n        }\n\n        // for the given list of ordered pairs, returns a function that (efficiently) looks-up a specific pair to\n        // see if it exists in the list\n        private static getOrder(pairs: { l: number; r: number }[]): (l: number, r: number) => boolean {\n            var outgoing = {};\n            for (var i = 0; i < pairs.length; i++) {\n                var p = pairs[i];\n                if (typeof outgoing[p.l] === 'undefined') outgoing[p.l] = {};\n                outgoing[p.l][p.r] = true;\n            }\n            return (l, r) => typeof outgoing[l] !== 'undefined' && outgoing[l][r];\n        }\n\n        // returns an ordering (a lookup function) that determines the correct order to nudge the\n        // edge paths apart to minimize crossings\n        static orderEdges(edges) {\n            var edgeOrder = [];\n            for (var i = 0; i < edges.length - 1; i++) {\n                for (var j = i + 1; j < edges.length; j++) {\n                    var e = edges[i],\n                        f = edges[j],\n                        lcs = new LongestCommonSubsequence(e, f);\n                    var u, vi, vj;\n                    if (lcs.length === 0)\n                        continue; // no common subpath\n                    if (lcs.reversed) {\n                        // if we found a common subpath but one of the edges runs the wrong way,\n                        // then reverse f.\n                        f.reverse();\n                        f.reversed = true;\n                        lcs = new LongestCommonSubsequence(e, f);\n                    }\n                    if ((lcs.si <= 0 || lcs.ti <= 0) &&\n                        (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length)) {\n                        // the paths do not diverge, so make an arbitrary ordering decision\n                        edgeOrder.push({ l: i, r: j });\n                        continue;\n                    }\n                    if (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length) {\n                        // if the common subsequence of the\n                        // two edges being considered goes all the way to the\n                        // end of one (or both) of the lines then we have to\n                        // base our ordering decision on the other end of the\n                        // common subsequence\n                        u = e[lcs.si + 1];\n                        vj = e[lcs.si - 1];\n                        vi = f[lcs.ti - 1];\n                    } else {\n                        u = e[lcs.si + lcs.length - 2];\n                        vi = e[lcs.si + lcs.length];\n                        vj = f[lcs.ti + lcs.length];\n                    }\n                    if (GridRouter.isLeft(u, vi, vj)) {\n                        edgeOrder.push({ l: j, r: i });\n                    } else {\n                        edgeOrder.push({ l: i, r: j });\n                    }\n                }\n            }\n            //edgeOrder.forEach(function (e) { console.log('l:' + e.l + ',r:' + e.r) });\n            return GridRouter.getOrder(edgeOrder);\n        }\n\n        // for an orthogonal path described by a sequence of points, create a list of segments\n        // if consecutive segments would make a straight line they are merged into a single segment\n        // segments are over cloned points, not the original vertices\n        static makeSegments(path: Point[]): Point[][] {\n            function copyPoint(p: Point) {\n                return <Point>{ x: p.x, y: p.y };\n            }\n            var isStraight = (a, b, c) => Math.abs((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) < 0.001;\n            var segments = [];\n            var a = copyPoint(path[0]);\n            for (var i = 1; i < path.length; i++) {\n                var b = copyPoint(path[i]), c = i < path.length - 1 ? path[i + 1] : null;\n                if (!c || !isStraight(a, b, c)) {\n                    segments.push([a, b]);\n                    a = b;\n                }\n            }\n            return segments;\n        }\n\n        // find a route between node s and node t\n        // returns an array of indices to verts\n        route(s: number, t: number): Point[] {\n            var source = this.nodes[<number>s], target = this.nodes[<number>t];\n            this.obstacles = this.siblingObstacles(source, target);\n\n            var obstacleLookup = {};\n            this.obstacles.forEach(o => obstacleLookup[o.id] = o);\n            this.passableEdges = this.edges.filter(e=> {\n                var u = this.verts[e.source],\n                    v = this.verts[e.target];\n                return !(u.node && u.node.id in obstacleLookup\n                    || v.node && v.node.id in obstacleLookup);\n            });\n\n            // add dummy segments linking ports inside source and target\n            for (var i = 1; i < source.ports.length; i++) {\n                var u = source.ports[0].id;\n                var v = source.ports[i].id;\n                this.passableEdges.push({\n                    source: u,\n                    target: v,\n                    length: 0\n                });\n            }\n            for (var i = 1; i < target.ports.length; i++) {\n                var u = target.ports[0].id;\n                var v = target.ports[i].id;\n                this.passableEdges.push({\n                    source: u,\n                    target: v,\n                    length: 0\n                });\n            }\n\n            var getSource = e=> e.source,\n                getTarget = e=> e.target,\n                getLength = e=> e.length;\n\n            var shortestPathCalculator = new Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);\n            var bendPenalty = (u, v, w) => {\n                var a = this.verts[u], b = this.verts[v], c = this.verts[w];\n                var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);\n                // don't count bends from internal node edges\n                if (a.node === source && a.node === b.node || b.node === target && b.node === c.node)\n                    return 0;\n                return dx > 1 && dy > 1 ? 1000 : 0;\n            };\n\n            // get shortest path\n            var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(\n                source.ports[0].id, target.ports[0].id,\n                bendPenalty);\n\n            // shortest path is reversed and does not include the target port\n            var pathPoints = shortestPath.reverse().map(vi => this.verts[vi]);\n            pathPoints.push(this.nodes[target.id].ports[0]);\n\n            // filter out any extra end points that are inside the source or target (i.e. the dummy segments above)\n            return pathPoints.filter((v, i) =>\n                !(i < pathPoints.length - 1 && pathPoints[i + 1].node === source && v.node === source\n                    || i > 0 && v.node === target && pathPoints[i - 1].node === target));\n        }\n\n        static getRoutePath(route: Point[][], cornerradius: number, arrowwidth: number, arrowheight: number): { routepath: string; arrowpath: string } {\n            var result = {\n                routepath: 'M ' + route[0][0].x + ' ' + route[0][0].y + ' ',\n                arrowpath: ''\n            };\n            if (route.length > 1) {\n                for (var i = 0; i < route.length; i++) {\n                    var li = route[i];\n                    var x = li[1].x, y = li[1].y;\n                    var dx = x - li[0].x;\n                    var dy = y - li[0].y;\n                    if (i < route.length - 1) {\n                        if (Math.abs(dx) > 0) {\n                            x -= dx / Math.abs(dx) * cornerradius;\n                        } else {\n                            y -= dy / Math.abs(dy) * cornerradius;\n                        }\n                        result.routepath += 'L ' + x + ' ' + y + ' ';\n                        var l = route[i + 1];\n                        var x0 = l[0].x, y0 = l[0].y;\n                        var x1 = l[1].x;\n                        var y1 = l[1].y;\n                        dx = x1 - x0;\n                        dy = y1 - y0;\n                        var angle = GridRouter.angleBetween2Lines(li, l) < 0 ? 1 : 0;\n                        //console.log(cola.GridRouter.angleBetween2Lines(li, l))\n                        var x2, y2;\n                        if (Math.abs(dx) > 0) {\n                            x2 = x0 + dx / Math.abs(dx) * cornerradius;\n                            y2 = y0;\n                        } else {\n                            x2 = x0;\n                            y2 = y0 + dy / Math.abs(dy) * cornerradius;\n                        }\n                        var cx = Math.abs(x2 - x);\n                        var cy = Math.abs(y2 - y);\n                        result.routepath += 'A ' + cx + ' ' + cy + ' 0 0 ' + angle + ' ' + x2 + ' ' + y2 + ' ';\n                    } else {\n                        var arrowtip = [x, y];\n                        var arrowcorner1, arrowcorner2;\n                        if (Math.abs(dx) > 0) {\n                            x -= dx / Math.abs(dx) * arrowheight;\n                            arrowcorner1 = [x, y + arrowwidth];\n                            arrowcorner2 = [x, y - arrowwidth];\n                        } else {\n                            y -= dy / Math.abs(dy) * arrowheight;\n                            arrowcorner1 = [x + arrowwidth, y];\n                            arrowcorner2 = [x - arrowwidth, y];\n                        }\n                        result.routepath += 'L ' + x + ' ' + y + ' ';\n                        if (arrowheight > 0) {\n                            result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\n                            + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\n                        }\n                    }\n                }\n            } else {\n                var li = route[0];\n                var x = li[1].x, y = li[1].y;\n                var dx = x - li[0].x;\n                var dy = y - li[0].y;\n                var arrowtip = [x, y];\n                var arrowcorner1, arrowcorner2;\n                if (Math.abs(dx) > 0) {\n                    x -= dx / Math.abs(dx) * arrowheight;\n                    arrowcorner1 = [x, y + arrowwidth];\n                    arrowcorner2 = [x, y - arrowwidth];\n                } else {\n                    y -= dy / Math.abs(dy) * arrowheight;\n                    arrowcorner1 = [x + arrowwidth, y];\n                    arrowcorner2 = [x - arrowwidth, y];\n                }\n                result.routepath += 'L ' + x + ' ' + y + ' ';\n                if (arrowheight > 0) {\n                    result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\n                    + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\n                }\n            }\n            return result;\n        }\n    }\n","import {Calculator} from './shortestpaths'\nimport {Descent} from './descent'\nimport {Projection, GraphNode, Rectangle} from './rectangle'\nimport {Variable} from './vpsc'\nimport {jaccardLinkLengths, LinkLengthAccessor} from './linklengths'\nimport { getDerivativeComputerWasm } from './wasmEngine'\n\n// Kick this off right away since we're going to need it eventually\nconst wasmInstPromise = getDerivativeComputerWasm();\n\nexport class Link3D {\n        length: number;\n        constructor(public source: number, public target: number) { }\n        actualLength(x: number[][]) {\n            return Math.sqrt(\n                x.reduce((c: number, v: number[]) => {\n                    const dx = v[this.target] - v[this.source];\n                    return c + dx * dx;\n                }, 0));\n        }\n    }\n    export class Node3D implements GraphNode {\n        // if fixed, layout will not move the node from its specified starting position\n        fixed: boolean;\n        width: number;\n        height: number;\n        px: number;\n        py: number;\n        bounds: Rectangle;\n        variable: Variable;\n        constructor(\n            public x: number = 0,\n            public y: number = 0,\n            public z: number = 0) { }\n    }\n    export class Layout3D {\n        static dims = ['x', 'y', 'z'];\n        static k = Layout3D.dims.length;\n        result: number[][];\n        constraints: any[] = null;\n\n        constructor(public nodes: Node3D[], public links: Link3D[], public idealLinkLength: number = 1) {\n            this.result = new Array(Layout3D.k);\n            for (var i = 0; i < Layout3D.k; ++i) {\n                this.result[i] = new Array(nodes.length);\n            }\n            nodes.forEach((v, i) => {\n                for (var dim of Layout3D.dims) {\n                    if (typeof v[dim] == 'undefined') v[dim] = Math.random();\n                }\n                this.result[0][i] = v.x;\n                this.result[1][i] = v.y;\n                this.result[2][i] = v.z;\n            });\n        };\n\n        linkLength(l: Link3D): number {\n            return l.actualLength(this.result);\n        }\n\n        useJaccardLinkLengths: boolean = true;\n\n        descent: Descent;\n        async start(iterations: number = 100): Promise<Layout3D> {\n            const n = this.nodes.length;\n\n            var linkAccessor = new LinkAccessor();\n\n            if (this.useJaccardLinkLengths)\n                jaccardLinkLengths(this.links, linkAccessor, 1.5);\n\n            this.links.forEach(e => e.length *= this.idealLinkLength);\n\n            // Create the distance matrix that Cola needs\n            const distanceMatrix = (new Calculator(n, this.links,\n                e=> e.source, e=> e.target, e => e.length)).DistanceMatrix();\n\n            const D = Descent.createSquareMatrix(n, (i, j) => distanceMatrix[i][j]);\n\n            // G is a square matrix with G[i][j] = 1 iff there exists an edge between node i and node j\n            // otherwise 2.\n            var G = Descent.createSquareMatrix(n, function () { return 2 });\n            this.links.forEach(({ source, target }) => G[source][target] = G[target][source] = 1);\n\n            const wasmInst = await wasmInstPromise;\n            this.descent = new Descent(this.result, D, undefined, wasmInst);\n            this.descent.threshold = 1e-3;\n            this.descent.G = G.map(Gn => new Float32Array(Gn));\n            //let constraints = this.links.map(e=> <any>{\n            //    axis: 'y', left: e.source, right: e.target, gap: e.length*1.5\n            //});\n            if (this.constraints)\n                this.descent.project = new Projection(<GraphNode[]>this.nodes, null, null, this.constraints).projectFunctions();\n\n            for (var i = 0; i < this.nodes.length; i++) {\n                var v = this.nodes[i];\n                if (v.fixed) {\n                    this.descent.locks.add(i, [v.x, v.y, v.z]);\n                }\n            }\n\n            this.descent.run(iterations);\n            return this;\n        }\n\n        tick(): number {\n            this.descent.locks.clear();\n            for (var i = 0; i < this.nodes.length; i++) {\n                var v = this.nodes[i];\n                if (v.fixed) {\n                    this.descent.locks.add(i, [v.x, v.y, v.z]);\n                }\n            }\n            return this.descent.rungeKutta();\n        }\n    }\n\n    class LinkAccessor implements LinkLengthAccessor<any> {\n        getSourceIndex(e: any): number { return e.source; }\n        getTargetIndex(e: any): number { return e.target; }\n        getLength(e: any): number { return e.length; }\n        setLength(e: any, l: number) { e.length = l; }\n    }\n","import {Node, Link, Layout} from './layout'\nimport {GridRouter} from './gridrouter'\nimport {Point} from './geom'\n\n/**\n * @property nudgeGap spacing between parallel edge segments\n * @property margin space around nodes\n * @property groupMargin space around groups\n */\nexport function gridify(pgLayout, nudgeGap: number, margin: number, groupMargin: number) {\n    pgLayout.cola.start(0, 0, 0, 10, false);\n    let gridrouter = route(pgLayout.cola.nodes(), pgLayout.cola.groups(), margin, groupMargin);\n    return gridrouter.routeEdges<any>(pgLayout.powerGraph.powerEdges, nudgeGap, e=> e.source.routerNode.id, e=> e.target.routerNode.id);\n}\n\nfunction route(nodes, groups, margin: number, groupMargin: number) {\n    nodes.forEach(d => {\n        d.routerNode = <any>{\n            name: d.name,\n            bounds: d.bounds.inflate(-margin)\n        };\n    });\n    groups.forEach(d => {\n        d.routerNode = <any>{\n            bounds: d.bounds.inflate(-groupMargin),\n            children: (typeof d.groups !== 'undefined' ? d.groups.map(c=> nodes.length + c.id) : [])\n                .concat(typeof d.leaves !== 'undefined' ? d.leaves.map(c=> c.index) : [])\n        };\n    });\n    let gridRouterNodes = nodes.concat(groups).map((d, i) => {\n        d.routerNode.id = i;\n        return d.routerNode;\n    });\n    return new GridRouter(gridRouterNodes, {\n        getChildren: (v: any) => v.children,\n        getBounds: v => v.bounds\n    }, margin - groupMargin);\n}\n\nexport function powerGraphGridLayout(\n    graph: { nodes: Node[], links: Link<Node>[] },\n    size: number[],\n    grouppadding: number)\n{\n    // compute power graph\n    var powerGraph;\n    graph.nodes.forEach((v,i) => (<any>v).index = i);\n    new Layout()\n        .avoidOverlaps(false)\n        .nodes(graph.nodes)\n        .links(graph.links)\n        .powerGraphGroups(function (d) {\n            powerGraph = d;\n            powerGraph.groups.forEach(v=> v.padding = grouppadding);\n        });\n\n    // construct a flat graph with dummy nodes for the groups and edges connecting group dummy nodes to their children\n    // power edges attached to groups are replaced with edges connected to the corresponding group dummy node\n    var n = graph.nodes.length;\n    var edges = [];\n    var vs = graph.nodes.slice(0);\n    vs.forEach((v, i) => (<any>v).index = i);\n    powerGraph.groups.forEach(g => {\n        var sourceInd = g.index = g.id + n;\n        vs.push(g);\n        if (typeof g.leaves !== 'undefined')\n            g.leaves.forEach(v => edges.push({ source: sourceInd, target: v.index }));\n        if (typeof g.groups !== 'undefined')\n            g.groups.forEach(gg => edges.push({ source: sourceInd, target: gg.id + n }));\n    });\n    powerGraph.powerEdges.forEach(e=> {\n        edges.push({ source: e.source.index, target: e.target.index });\n    });\n\n    // layout the flat graph with dummy nodes and edges\n    new Layout()\n        .size(size)\n        .nodes(vs)\n        .links(edges)\n        .avoidOverlaps(false)\n        .linkDistance(30)\n        .symmetricDiffLinkLengths(5)\n        .convergenceThreshold(1e-4)\n        .start(100, 0, 0, 0, false);\n\n    // final layout taking node positions from above as starting positions\n    // subject to group containment constraints\n    // and then gridifying the layout\n    return {\n        cola:\n            new Layout()\n            .convergenceThreshold(1e-3)\n            .size(size)\n            .avoidOverlaps(true)\n            .nodes(graph.nodes)\n            .links(graph.links)\n        //.flowLayout('y', 30)\n            .groupCompactness(1e-4)\n            .linkDistance(30)\n            .symmetricDiffLinkLengths(5)\n            .powerGraphGroups(function (d) {\n                powerGraph = d;\n                powerGraph.groups.forEach(function (v) {\n                    v.padding = grouppadding\n                });\n            }).start(50, 0, 100, 0, false),\n        powerGraph: powerGraph\n    };\n}\n"],"names":["PowerEdge","source","target","type","Configuration","n","edges","linkAccessor","rootGroup","modules","Array","roots","initModulesFromGroup","push","ModuleSet","i","add","Module","R","length","forEach","e","s","getSourceIndex","t","getTargetIndex","getType","outgoing","incoming","group","moduleSet","leaves","node","module","id","groups","j","child","definition","prop","hasOwnProperty","LinkSets","merge","a","b","k","inInt","intersection","outInt","children","m","update","o","forAll","ms","linktype","nls","remove","count","rootMerges","rs","merges","ctr","i_","nEdges","greedyMerge","sort","getGroupHierarchy","retargetedEdges","root","toGroups","es","allEdges","gid","getEdges","isLeaf","g","isIsland","isPredefined","edgetype","v","Object","keys","table","other","result","intersectionCount","contains","f","mid","vs","forAllModules","sets","Number","lt","getGroups","nodes","links","la","c","powerEdges","end","unionCount","u","getNeighbours","neighbours","addNeighbours","computeLinkLengths","w","l","setLength","symmetricDiffLinkLengths","Math","sqrt","jaccardLinkLengths","min","generateDirectedEdgeConstraints","axis","components","stronglyConnectedComponents","constraints","ui","vi","left","right","gap","getMinSeparation","numVertices","index","stack","strongConnect","lowlink","onStack","out","component","pop","map","Locks","x","locks","clear","isEmpty","apply","BYTES_PER_F32","Descent","D","G","wasm","PseudoRandom","xn","Float32Array","setupWasm","d","ia","ib","xtmp","minD","MAX_VALUE","computeDerivatives","packedX","packed","set","outX","compute_2d","ctxPtr","slice","subarray","compute_3d","Error","p","apply_lock_2d","apply_lock_3d","cleanWasmMemory","release_ctx_2d","allD","allG","dn","gn","Infinity","createrFn","create_derivative_computer_ctx_2d","create_derivative_computer_ctx_3d","createSquareMatrix","M","offsetDir","random","getNextBetween","dotProd","rightMultiply","r","computeStepSize","compute_step_size_2d","compute_step_size_3d","reduceStress","alpha","thisG","takeDescentStep","computeStress","copy","stepAndProject","x0","stepSize","project","mApply","matrixApply","computeNextPosition","run","iterations","stress","converged","rungeKutta","abs","threshold","disp","nMinus1","dx","isFinite","rl","d2","memory","get_memory","memoryView","buffer","gPtr","get_g_2d","get_g_3d","gOffset","fill","_","newG","Gn","set_G_2d","set_G_3d","DPtr","get_D_2d","get_D_3d","DOffset","seed","getNext","range","max","PositionStats","scale","addVariable","ai","bi","offset","wi","weight","AB","AD","desiredPosition","A2","getPosn","Constraint","equality","slack","unsatisfiable","position","Variable","dfdv","block","ps","posn","visitNeighbours","prev","ff","next","active","cOut","cIn","Block","vars","updateWeightedPosition","compute_lm","postAction","_dfdv","lm","populateSplitBlock","traverse","visit","acc","findMinLM","findMinLMBetween","lv","rv","findPath","to","endFound","isActiveDirectedPathBetween","split","createSplitBlock","startVar","splitBetween","vl","vr","bs","constraint","lb","rb","mergeAcross","dist","cost","sum","Blocks","list","blockInd","insert","last","swapBlock","updateBlockPositions","inactive","Solver","LAGRANGIAN_TOLERANCE","nb","cs","setStartingPositions","setDesiredPositions","mostViolated","minSlack","deletePoint","ZERO_UPPERBOUND","satisfy","solve","lastcost","removeOverlapInOneDimension","spans","lowerBound","upperBound","desiredCenter","size","leftMost","rightMost","leftMostSize","rightMostSize","vLower","vUpper","solver","newCenters","TreeBase","data","res","_root","iter","iterator","_comparator","_cursor","_ancestors","get_child","find","_bound","cmp","reverse_cmp","Iterator","each","cb","it","reach","cur","tree","_tree","_minNode","save","_maxNode","start","Node","red","dir","set_child","val","RBTree","comparator","ret","head","undefined","gp","ggp","is_red","dir2","single_rotate","double_rotate","found","sr","sibling","gpc","computeGroupBounds","bounds","reduce","union","Rectangle","empty","inflate","padding","X","y","Y","POSITIVE_INFINITY","NEGATIVE_INFINITY","cx","cy","overlapX","ux","vx","overlapY","uy","vy","setXCentre","setYCentre","dy","width","height","lineIntersections","x1","y1","x2","y2","sides","intersections","lineIntersection","rayIntersection","ints","vertices","x3","y3","x4","y4","dx12","dx34","dy12","dy34","denominator","dx31","dy31","numa","numb","pad","makeEdgeBetween","ah","si","ti","al","sourceIntersection","targetIntersection","arrowStart","makeEdgeTo","pos","makeRBTree","Event","isOpen","compareEvents","xRect","getCentre","getOpen","getClose","getSize","makeRect","open","close","center","findNeighbours","findXNeighbours","yRect","findYNeighbours","generateGroupConstraints","minSep","isContained","ln","childConstraints","ccs","concat","minVar","maxVar","variable","generateConstraints","gapAdjustment","rect","N","console","assert","events","scanline","makeConstraint","sep","forward","reverse","mkcon","findIter","uovervX","generateXConstraints","generateYConstraints","generateXGroupConstraints","generateYGroupConstraints","removeOverlaps","IndexedVariable","Projection","avoidOverlaps","variables","createConstraints","w2","h2","stiffness","createSeparation","makeFeasible","dim","offsets","nextPos","createAlignment","xConstraints","yConstraints","isSep","filter","setupVariablesAndBounds","y0","desired","getDesired","fixed","fixedWeight","h","ix","iy","xProject","px","xmin","xmax","p2","yProject","py","ymin","ymax","projectFunctions","updateNodeBounds","updateGroupBounds","starting","PairingHeap","elem","subheaps","toString","selector","str","needComma","subheap","isHeap","lessThan","every","obj","heap2","removeMin","mergePairs","firstPair","remaining","decreaseKey","newValue","setHeapNode","newHeap","pairingNode","PriorityQueue","top","arg","reduceKey","heapNode","newKey","Neighbour","distance","QueueEntry","Calculator","getLength","DistanceMatrix","dijkstraNeighbours","DistancesFromNode","PathFromNodeToNode","PathFromNodeToNodeWithPrevCost","prevCost","q","qu","visitedFrom","neighbour","viduid","cc","path","dest","Point","LineSegment","PolyPoint","isLeft","P0","P1","P2","above","vj","below","ConvexHull","S","P","minmin","minmax","H","maxmin","maxmax","bot","clockwiseRadialSweep","atan2","tangent_PointPolyC","V","Vclosed","rtan","Rtangent_PointPolyC","ltan","Ltangent_PointPolyC","upA","dnC","floor","dnA","tangent_PolyPolyC","W","t1","t2","cmp1","cmp2","ix1","ix2","done","LRtangent_PolyPolyC","RLtangent_PolyPolyC","LLtangent_PolyPolyC","RRtangent_PolyPolyC","BiTangent","BiTangents","TVGPoint","VisibilityVertex","polyid","polyvertid","vv","VisibilityEdge","TangentVisibilityGraph","g0","pj","E","Pi","Pj","tangents","addEdgeIfVisible","i1","i2","intersectsPolys","addPoint","poly","intersects","int","bt","v1","v2","v3","w1","w3","v1v2w2","v2w1w2","v2w2w3","w1w2v2","w2v1v2","w2v2v3","ll","rr","lr","isPointInsidePoly","isAnyPInQ","polysOverlap","packingOptions","PADDING","GOLDEN_SECTION","FLOAT_EPSILON","MAX_INERATIONS","applyPacking","graphs","node_size","desired_ratio","centerGraph","init_x","init_y","svg_width","svg_height","real_width","real_height","min_width","global_bottom","line","calculate_bb","put_nodes_to_right_positions","calculate_single_bb","graph","min_x","min_y","max_x","max_y","array","corner","curr_best_f","curr_best","get_entire_width","iterationCounter","f_x1","f_x2","flag","df","step","max_width","put_rect","get_real_ratio","parent","space_left","bottom","separateGraphs","marks","ways","clusters","link","n1","n2","explore_node","is_new","adjacent","setWasm","wasmModule","WebAssembly","instantiate","__wbindgen_memory","inst","exports","getWasm","__wbg_set_wasm","heap","heap_next","addHeapObject","idx","ctx_ptr","cachedFloat32Memory0","getFloat32Memory0","byteLength","WASM_VECTOR_LEN","passArrayF32ToWasm0","malloc","ptr","node_count","ptr0","__wbindgen_malloc","len0","ptr1","len1","cachedInt32Memory0","getInt32Memory0","Int32Array","getArrayF32FromWasm0","len","retptr","__wbindgen_add_to_stack_pointer","r0","r1","__wbindgen_free","p_0","p_1","x_0_u","x_1_u","p_2","x_2_u","getObject","dropObject","takeObject","ctx","new_G","getHasSIMDSupport","validate","Uint8Array","AsyncOnce","getter","get","value","pending","Promise","resolve","then","WasmInst","hasWasmSIMDSupport","window","location","href","includes","log","wasmSIMD_bg","wasmSIMD","wasmNoSIMD_bg","wasmNoSIMD","getDerivativeComputerWasm","wasmInstPromise","EventType","isGroup","Layout","setLinkLength","_linkType","on","listener","event","trigger","kick","tick","_alpha","_threshold","_running","_lastStress","_nodes","_descent","s1","updateNodePositions","_links","_groups","_rootGroup","gi","powerGraphGroups","powergraph","arguments","_avoidOverlaps","handleDisconnected","_handleDisconnected","flowLayout","minSeparation","_directedLinkConstraints","_constraints","distanceMatrix","_distanceMatrix","_canvasSize","defaultNodeSize","_defaultNodeSize","groupCompactness","_groupCompactness","linkDistance","_linkDistance","_linkLengthCalculator","linkType","convergenceThreshold","getLinkLength","getLinkType","idealLength","initialUnconstrainedIterations","initialUserConstraintIterations","initialAllConstraintsIterations","gridSnapIterations","keepRunning","ao","distances","addAttraction","strength","idealDistance","curConstraints","wasmInst","initialLayout","separateOverlappingComponents","resume","gg","pause","stop","prepareEdgeRouting","nodeMargin","_visibilityGraph","routeEdge","edge","draw","lineData","vg2","port1","port2","sourceInd","targetInd","spCalc","shortestPath","route","innerBounds","linkId","dragStart","storeOffset","dragOrigin","stopNode","origin","_dragGroupOffsetX","_dragGroupOffsetY","drag","dragEnd","mouseOver","mouseOut","LayoutAdaptor","options","self","dragstart","dragend","eventType","adaptor","D3StyleLayoutAdaptor","d3Context","d3","dispatch","d3layout","behavior","call","d3event","timer","D3v4StyleLayoutAdaptor","subject","d3adaptor","isD3V3","v3exp","version","match","NodeWrapper","leaf","Vert","LongestCommonSubsequence","mf","findMatch","tr","mr","reversed","getSequence","GridRouter","originalnodes","accessor","groupPadding","getBounds","getChildren","cols","getGridLines","rows","ports","backToFront","getDepth","frontToBackGroups","colMids","midPoints","rowMids","rowx","rowX","coly","colY","hlines","vlines","lines","verts","li","intersect","isHoriz","delta","avg","columns","ls","overlapping","toUpperCase","col","splice","indexOf","depth","mids","findLineage","lineage","findAncestorPathBetween","aa","ba","commonAncestor","lineages","siblingObstacles","lineageLookup","obstacles","getSegmentSets","routes","vsegments","ei","edgeid","sdx","vsegmentsets","segmentset","segments","nudgeSegs","leftOf","s2","e1","e2","lind","rind","nudgeSegments","ss","openCount","routeEdges","nudgeGap","routePaths","order","orderEdges","makeSegments","unreverseEdges","segment","angleBetween2Lines","line1","line2","angle1","angle2","diff","PI","getOrder","pairs","edgeOrder","lcs","copyPoint","isStraight","obstacleLookup","passableEdges","getSource","getTarget","shortestPathCalculator","bendPenalty","pathPoints","getRoutePath","cornerradius","arrowwidth","arrowheight","routepath","arrowpath","angle","arrowtip","arrowcorner1","arrowcorner2","Link3D","actualLength","Node3D","z","Layout3D","idealLinkLength","dims","linkLength","LinkAccessor","useJaccardLinkLengths","descent","gridify","pgLayout","margin","groupMargin","cola","gridrouter","powerGraph","routerNode","name","gridRouterNodes","powerGraphGridLayout","grouppadding"],"mappings":"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"}